
attiny1616-sao.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00803800  0000157f  00001633  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ca  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b5  000094ca  000014ca  0000157e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000052  0080382c  0080382c  0000165f  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000165f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000180  00000000  00000000  000016d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003c5b  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cd6  00000000  00000000  000054ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012c0  00000000  00000000  00007181  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000310  00000000  00000000  00008444  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ae5  00000000  00000000  00008754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000083b  00000000  00000000  0000a239  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  0000aa74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_13>
      38:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_14>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	6f 06       	cpc	r6, r31
      7e:	72 06       	cpc	r7, r18
      80:	8c 06       	cpc	r8, r28
      82:	8f 06       	cpc	r8, r31
      84:	a8 06       	cpc	r10, r24
      86:	ab 06       	cpc	r10, r27
      88:	cc 06       	cpc	r12, r28
      8a:	e0 06       	cpc	r14, r16
      8c:	f8 06       	cpc	r15, r24
      8e:	0a 07       	cpc	r16, r26
      90:	19 07       	cpc	r17, r25

00000092 <__trampolines_end>:
      92:	03 00       	.word	0x0003	; ????
	...

00000096 <nyanBass>:
      96:	00 00 75 69 73 67 76 6a 71 65 78 6c 73 67 3a 2e     ..uisgvjqexlsg:.
      a6:	7a 78 76                                            zxv

000000a9 <nyanExtTreble>:
	...

000000c8 <nyanTreble>:
      c8:	12 11 0f 00 0a 11 12 11 0f 0a 06 05 06 0b 0a 00     ................
      d8:	0f 00 12 11 0f 00 4a 08 0b 0a 08 05 06 05 08 4f     ......J........O
      e8:	4d 15 52 14 13 14 56 56 54 53 13 14 16 14 12 0f     M.R...VVTS......
      f8:	0d 12 0f 14 12 16 14 16 52 4f 0d 12 0f 14 12 16     ........RO......
     108:	15 12 13 14 16 14 53 16 14 12 0f 14 13 14 16 54     ......S........T
     118:	56 54 4f 4d 15 52 14 13 14 56 56 54 53 13 14 16     VTOM.R...VVTS...
     128:	14 12 0f 0d 12 0f 14 12 16 14 16 52 4f 0d 12 0f     ...........RO...
     138:	14 12 16 15 12 13 14 16 14 53 16 14 12 0f 14 13     .........S......
     148:	14 16 54 56 56 56 1b 19 56 1b 19 16 14 12 16 11     ..TVVV..V.......
     158:	12 11 0f 56 56 1b 19 16 1b 11 12 14 16 1d 1e 1d     ...VV...........
     168:	1b 56 1b 19 56 1b 19 16 16 14 12 16 1b 19 1b 56     .V..V..........V
     178:	16 17 16 1b 19 16 11 12 11 0f 56 57 56 1b 19 56     ..........VWV..V
     188:	1b 19 16 14 12 16 11 12 11 0f 56 56 1b 19 16 1b     ..........VV....
     198:	11 12 14 16 1d 1e 1d 1b 56 1b 19 56 1b 19 16 16     ........V..V....
     1a8:	14 12 16 1b 19 1b 56 16 17 16 1b 19 16 11 12 11     ......V.........
     1b8:	0f 56 54 00                                         .VT.

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	df e3       	ldi	r29, 0x3F	; 63
     1c6:	de bf       	out	0x3e, r29	; 62

000001c8 <__do_copy_data>:
     1c8:	18 e3       	ldi	r17, 0x38	; 56
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b8 e3       	ldi	r27, 0x38	; 56
     1ce:	ef e7       	ldi	r30, 0x7F	; 127
     1d0:	f5 e1       	ldi	r31, 0x15	; 21
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
     1d4:	05 90       	lpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	ac 32       	cpi	r26, 0x2C	; 44
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
     1de:	28 e3       	ldi	r18, 0x38	; 56
     1e0:	ac e2       	ldi	r26, 0x2C	; 44
     1e2:	b8 e3       	ldi	r27, 0x38	; 56
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	ae 37       	cpi	r26, 0x7E	; 126
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 34 07 	call	0xe68	; 0xe68 <main>
     1f2:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <output_pixels>:
//r18 = array size
//r17 = shift counter
//r16 = current byte
	
	;r16 and 17 are the only registers that we will need outside of what was passed in as args, so save those
	push r16			
     1fa:	0f 93       	push	r16
	push r17
     1fc:	1f 93       	push	r17
//First load the address of the array into the indexing registers
	MOVW X, r20			;store the array address in X
     1fe:	da 01       	movw	r26, r20
	MOVW Y, r24			;store the PORT address in Y
     200:	ec 01       	movw	r28, r24

00000202 <output_byte>:

output_byte:
	ldi r17, 8			;load 8 into r17 for the shift counter
     202:	18 e0       	ldi	r17, 0x08	; 8
	ld r16, X+			;load the address at X into r16 and inc the address
     204:	0d 91       	ld	r16, X+

00000206 <output_bit>:
	
output_bit:
	std Y+5, r22		;store the PIN bm into the OUTSET reg
     206:	6d 83       	std	Y+5, r22	; 0x05
	...
	nop
	nop
	nop
	nop

	sbrs r16, 0			;skip the next line that sets the output low if the first bit is set
     214:	00 ff       	sbrs	r16, 0
	std Y+6, r22		;set the output low using the address of the OUTCLR reg and the pin
     216:	6e 83       	std	Y+6, r22	; 0x06
	...
	nop
	nop
	nop
	nop
	nop
	nop
     224:	00 00       	nop

	std Y+6, r22		;now set the output low 
     226:	6e 83       	std	Y+6, r22	; 0x06
	...
	nop					;delay a bit longer for the min off time
	nop
	nop
	nop

	lsr r16				;shift r16 right to move to the next bit
     230:	06 95       	lsr	r16
	dec r17				;decrement the shift count
     232:	1a 95       	dec	r17
	brne output_bit		;if we are not at 0, then output the next bit
     234:	41 f7       	brne	.-48     	; 0x206 <output_bit>

	dec r18				;decrement the array size (number of bytes)
     236:	2a 95       	dec	r18
	brne output_byte	;if we are not at 0 bytes, start to output the next byte	
     238:	21 f7       	brne	.-56     	; 0x202 <output_byte>
	
	std Y+6, r22		;we are done so clear the output
     23a:	6e 83       	std	Y+6, r22	; 0x06
	pop r17				;restore r16 and 17
     23c:	1f 91       	pop	r17
	pop r16
     23e:	0f 91       	pop	r16
ret
     240:	08 95       	ret

00000242 <test_asm>:

test_asm:
	push r16
     242:	0f 93       	push	r16
	push r17
     244:	1f 93       	push	r17

	ldi	r16, 0x02		;rgb led out pin = pin 1
     246:	02 e0       	ldi	r16, 0x02	; 2
	ldi r17, (24 * 3)
     248:	18 e4       	ldi	r17, 0x48	; 72

0000024a <loop_start>:
	
	
loop_start:	
	sts 0x0405, r16		;set the pin hi first
     24a:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <noteClocks+0x7f6f04>
	...
	nop
	nop
	nop
	nop
	nop
	sbrs r17, 0
     25a:	10 ff       	sbrs	r17, 0
	sts 0x0406, r16		;clear the pin after a period for high or low
     25c:	00 93 06 04 	sts	0x0406, r16	; 0x800406 <noteClocks+0x7f6f05>
	...
	nop
	nop
	nop
	nop
	sbrc r17, 0
     268:	10 fd       	sbrc	r17, 0
	sts 0x0406, r16		;clear the pin after a period for high or low
     26a:	00 93 06 04 	sts	0x0406, r16	; 0x800406 <noteClocks+0x7f6f05>
	nop
     26e:	00 00       	nop
	nop
     270:	00 00       	nop
	nop
     272:	00 00       	nop


	dec r17
     274:	1a 95       	dec	r17
	brne loop_start
     276:	49 f7       	brne	.-46     	; 0x24a <loop_start>

	pop r17
     278:	1f 91       	pop	r17
	pop r16
     27a:	0f 91       	pop	r16
	ret
     27c:	08 95       	ret

0000027e <clk_init>:
	
	unsigned int result = ADC0.RES;
	
	ADC0.CTRLA = 0;
	return result;
}
     27e:	88 ed       	ldi	r24, 0xD8	; 216
     280:	84 bf       	out	0x34, r24	; 52
     282:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <noteClocks+0x7f6b5f>
     286:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <noteClocks+0x7f6b62>
     28a:	84 ff       	sbrs	r24, 4
     28c:	fc cf       	rjmp	.-8      	; 0x286 <clk_init+0x8>
     28e:	88 ed       	ldi	r24, 0xD8	; 216
     290:	84 bf       	out	0x34, r24	; 52
     292:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <noteClocks+0x7f6b60>
     296:	08 95       	ret

00000298 <io_init>:
     298:	e0 e4       	ldi	r30, 0x40	; 64
     29a:	f4 e0       	ldi	r31, 0x04	; 4
     29c:	8f e0       	ldi	r24, 0x0F	; 15
     29e:	82 83       	std	Z+2, r24	; 0x02
     2a0:	88 e0       	ldi	r24, 0x08	; 8
     2a2:	80 8b       	std	Z+16, r24	; 0x10
     2a4:	81 8b       	std	Z+17, r24	; 0x11
     2a6:	82 8b       	std	Z+18, r24	; 0x12
     2a8:	83 8b       	std	Z+19, r24	; 0x13
     2aa:	e0 e2       	ldi	r30, 0x20	; 32
     2ac:	f4 e0       	ldi	r31, 0x04	; 4
     2ae:	90 e3       	ldi	r25, 0x30	; 48
     2b0:	92 83       	std	Z+2, r25	; 0x02
     2b2:	84 8b       	std	Z+20, r24	; 0x14
     2b4:	85 8b       	std	Z+21, r24	; 0x15
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b4 e0       	ldi	r27, 0x04	; 4
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	11 96       	adiw	r26, 0x01	; 1
     2be:	8c 93       	st	X, r24
     2c0:	11 97       	sbiw	r26, 0x01	; 1
     2c2:	80 e2       	ldi	r24, 0x20	; 32
     2c4:	11 96       	adiw	r26, 0x01	; 1
     2c6:	8c 93       	st	X, r24
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	81 83       	std	Z+1, r24	; 0x01
     2cc:	08 95       	ret

000002ce <timers_init>:
     2ce:	e0 e0       	ldi	r30, 0x00	; 0
     2d0:	fa e0       	ldi	r31, 0x0A	; 10
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	81 83       	std	Z+1, r24	; 0x01
     2d6:	9b e0       	ldi	r25, 0x0B	; 11
     2d8:	90 83       	st	Z, r25
     2da:	e0 e8       	ldi	r30, 0x80	; 128
     2dc:	fa e0       	ldi	r31, 0x0A	; 10
     2de:	11 82       	std	Z+1, r1	; 0x01
     2e0:	98 ed       	ldi	r25, 0xD8	; 216
     2e2:	94 bf       	out	0x34, r25	; 52
     2e4:	90 e2       	ldi	r25, 0x20	; 32
     2e6:	92 8b       	std	Z+18, r25	; 0x12
     2e8:	94 e1       	ldi	r25, 0x14	; 20
     2ea:	90 83       	st	Z, r25
     2ec:	e0 e4       	ldi	r30, 0x40	; 64
     2ee:	fa e0       	ldi	r31, 0x0A	; 10
     2f0:	11 82       	std	Z+1, r1	; 0x01
     2f2:	85 83       	std	Z+5, r24	; 0x05
     2f4:	94 e0       	ldi	r25, 0x04	; 4
     2f6:	90 83       	st	Z, r25
     2f8:	e0 e5       	ldi	r30, 0x50	; 80
     2fa:	fa e0       	ldi	r31, 0x0A	; 10
     2fc:	2c e1       	ldi	r18, 0x1C	; 28
     2fe:	3c e0       	ldi	r19, 0x0C	; 12
     300:	24 87       	std	Z+12, r18	; 0x0c
     302:	35 87       	std	Z+13, r19	; 0x0d
     304:	11 82       	std	Z+1, r1	; 0x01
     306:	85 83       	std	Z+5, r24	; 0x05
     308:	85 e0       	ldi	r24, 0x05	; 5
     30a:	80 83       	st	Z, r24
     30c:	08 95       	ret

0000030e <load_game_length>:
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <eeprom_read_byte>
     316:	95 e0       	ldi	r25, 0x05	; 5
     318:	90 93 0a 38 	sts	0x380A, r25	; 0x80380a <game_length>
     31c:	87 3a       	cpi	r24, 0xA7	; 167
     31e:	31 f4       	brne	.+12     	; 0x32c <load_game_length+0x1e>
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <eeprom_read_byte>
     328:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <game_length>
     32c:	08 95       	ret

0000032e <update_game_length>:
     32e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <game_length>
     332:	8f 5f       	subi	r24, 0xFF	; 255
     334:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <game_length>
     338:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <game_length>
     33c:	85 30       	cpi	r24, 0x05	; 5
     33e:	18 f4       	brcc	.+6      	; 0x346 <update_game_length+0x18>
     340:	85 e0       	ldi	r24, 0x05	; 5
     342:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <game_length>
     346:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <game_length>
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <eeprom_write_byte>
     352:	67 ea       	ldi	r22, 0xA7	; 167
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <eeprom_write_byte>
     35c:	08 95       	ret

0000035e <bmp_timer_enable>:
     35e:	e0 e4       	ldi	r30, 0x40	; 64
     360:	fa e0       	ldi	r31, 0x0A	; 10
     362:	84 87       	std	Z+12, r24	; 0x0c
     364:	95 87       	std	Z+13, r25	; 0x0d
     366:	80 81       	ld	r24, Z
     368:	81 60       	ori	r24, 0x01	; 1
     36a:	80 83       	st	Z, r24
     36c:	08 95       	ret

0000036e <bpm_timer_disable>:
     36e:	e0 e4       	ldi	r30, 0x40	; 64
     370:	fa e0       	ldi	r31, 0x0A	; 10
     372:	80 81       	ld	r24, Z
     374:	8e 7f       	andi	r24, 0xFE	; 254
     376:	80 83       	st	Z, r24
     378:	08 95       	ret

0000037a <play_note>:
     37a:	66 0f       	add	r22, r22
     37c:	66 0f       	add	r22, r22
     37e:	44 23       	and	r20, r20
     380:	29 f0       	breq	.+10     	; 0x38c <play_note+0x12>
     382:	60 93 3e 38 	sts	0x383E, r22	; 0x80383e <ch1_beats>
     386:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <ch1_note>
     38a:	08 95       	ret
     38c:	60 93 40 38 	sts	0x3840, r22	; 0x803840 <ch0_beats>
     390:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <ch0_note>
     394:	08 95       	ret

00000396 <load_next_note>:
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	c8 2f       	mov	r28, r24
     39c:	d0 e0       	ldi	r29, 0x00	; 0
     39e:	de 01       	movw	r26, r28
     3a0:	aa 0f       	add	r26, r26
     3a2:	bb 1f       	adc	r27, r27
     3a4:	aa 0f       	add	r26, r26
     3a6:	bb 1f       	adc	r27, r27
     3a8:	aa 0f       	add	r26, r26
     3aa:	bb 1f       	adc	r27, r27
     3ac:	ac 0f       	add	r26, r28
     3ae:	bd 1f       	adc	r27, r29
     3b0:	ac 5b       	subi	r26, 0xBC	; 188
     3b2:	b7 4c       	sbci	r27, 0xC7	; 199
     3b4:	12 96       	adiw	r26, 0x02	; 2
     3b6:	9c 91       	ld	r25, X
     3b8:	12 97       	sbiw	r26, 0x02	; 2
     3ba:	15 96       	adiw	r26, 0x05	; 5
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	16 97       	sbiw	r26, 0x06	; 6
     3c2:	e9 0f       	add	r30, r25
     3c4:	f1 1d       	adc	r31, r1
     3c6:	94 91       	lpm	r25, Z
     3c8:	17 96       	adiw	r26, 0x07	; 7
     3ca:	ed 91       	ld	r30, X+
     3cc:	fc 91       	ld	r31, X
     3ce:	18 97       	sbiw	r26, 0x08	; 8
     3d0:	13 96       	adiw	r26, 0x03	; 3
     3d2:	2c 91       	ld	r18, X
     3d4:	13 97       	sbiw	r26, 0x03	; 3
     3d6:	e2 0f       	add	r30, r18
     3d8:	f1 1d       	adc	r31, r1
     3da:	24 91       	lpm	r18, Z
     3dc:	39 2f       	mov	r19, r25
     3de:	32 95       	swap	r19
     3e0:	36 95       	lsr	r19
     3e2:	36 95       	lsr	r19
     3e4:	33 70       	andi	r19, 0x03	; 3
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <load_next_note+0x56>
     3ea:	66 0f       	add	r22, r22
     3ec:	3a 95       	dec	r19
     3ee:	ea f7       	brpl	.-6      	; 0x3ea <load_next_note+0x54>
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	14 96       	adiw	r26, 0x04	; 4
     3f4:	0c 90       	ld	r0, X
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <load_next_note+0x66>
     3f8:	35 95       	asr	r19
     3fa:	27 95       	ror	r18
     3fc:	0a 94       	dec	r0
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <load_next_note+0x62>
     400:	23 2b       	or	r18, r19
     402:	09 f0       	breq	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	60 e1       	ldi	r22, 0x10	; 16
     406:	48 2f       	mov	r20, r24
     408:	89 2f       	mov	r24, r25
     40a:	8f 73       	andi	r24, 0x3F	; 63
     40c:	0e 94 bd 01 	call	0x37a	; 0x37a <play_note>
     410:	fe 01       	movw	r30, r28
     412:	ee 0f       	add	r30, r30
     414:	ff 1f       	adc	r31, r31
     416:	ee 0f       	add	r30, r30
     418:	ff 1f       	adc	r31, r31
     41a:	ee 0f       	add	r30, r30
     41c:	ff 1f       	adc	r31, r31
     41e:	ec 0f       	add	r30, r28
     420:	fd 1f       	adc	r31, r29
     422:	ec 5b       	subi	r30, 0xBC	; 188
     424:	f7 4c       	sbci	r31, 0xC7	; 199
     426:	82 81       	ldd	r24, Z+2	; 0x02
     428:	8f 5f       	subi	r24, 0xFF	; 255
     42a:	82 83       	std	Z+2, r24	; 0x02
     42c:	91 81       	ldd	r25, Z+1	; 0x01
     42e:	89 17       	cp	r24, r25
     430:	a0 f0       	brcs	.+40     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     432:	fe 01       	movw	r30, r28
     434:	ee 0f       	add	r30, r30
     436:	ff 1f       	adc	r31, r31
     438:	ee 0f       	add	r30, r30
     43a:	ff 1f       	adc	r31, r31
     43c:	ee 0f       	add	r30, r30
     43e:	ff 1f       	adc	r31, r31
     440:	ec 0f       	add	r30, r28
     442:	fd 1f       	adc	r31, r29
     444:	ec 5b       	subi	r30, 0xBC	; 188
     446:	f7 4c       	sbci	r31, 0xC7	; 199
     448:	80 81       	ld	r24, Z
     44a:	82 83       	std	Z+2, r24	; 0x02
     44c:	98 2f       	mov	r25, r24
     44e:	96 95       	lsr	r25
     450:	96 95       	lsr	r25
     452:	96 95       	lsr	r25
     454:	93 83       	std	Z+3, r25	; 0x03
     456:	87 70       	andi	r24, 0x07	; 7
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	fe 01       	movw	r30, r28
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	ec 0f       	add	r30, r28
     46a:	fd 1f       	adc	r31, r29
     46c:	ec 5b       	subi	r30, 0xBC	; 188
     46e:	f7 4c       	sbci	r31, 0xC7	; 199
     470:	84 81       	ldd	r24, Z+4	; 0x04
     472:	8f 5f       	subi	r24, 0xFF	; 255
     474:	84 83       	std	Z+4, r24	; 0x04
     476:	88 30       	cpi	r24, 0x08	; 8
     478:	20 f0       	brcs	.+8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     47a:	14 82       	std	Z+4, r1	; 0x04
     47c:	83 81       	ldd	r24, Z+3	; 0x03
     47e:	8f 5f       	subi	r24, 0xFF	; 255
     480:	83 83       	std	Z+3, r24	; 0x03
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <stop_song>:
     488:	0e 94 b7 01 	call	0x36e	; 0x36e <bpm_timer_disable>
     48c:	e0 e0       	ldi	r30, 0x00	; 0
     48e:	fa e0       	ldi	r31, 0x0A	; 10
     490:	81 81       	ldd	r24, Z+1	; 0x01
     492:	8f 7e       	andi	r24, 0xEF	; 239
     494:	81 83       	std	Z+1, r24	; 0x01
     496:	e0 e8       	ldi	r30, 0x80	; 128
     498:	fa e0       	ldi	r31, 0x0A	; 10
     49a:	80 81       	ld	r24, Z
     49c:	8e 7f       	andi	r24, 0xFE	; 254
     49e:	80 83       	st	Z, r24
     4a0:	10 92 3f 38 	sts	0x383F, r1	; 0x80383f <ch0_note>
     4a4:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <ch0_beats>
     4a8:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <ch1_note>
     4ac:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <ch1_beats>
     4b0:	08 95       	ret

000004b2 <update_display>:
     4b2:	24 e2       	ldi	r18, 0x24	; 36
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	46 e5       	ldi	r20, 0x56	; 86
     4b8:	58 e3       	ldi	r21, 0x38	; 56
     4ba:	62 e0       	ldi	r22, 0x02	; 2
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	94 e0       	ldi	r25, 0x04	; 4
     4c0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <output_pixels>
     4c4:	08 95       	ret

000004c6 <update_standby_display>:
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	20 91 3b 38 	lds	r18, 0x383B	; 0x80383b <disp_temp>
     4d0:	9b ea       	ldi	r25, 0xAB	; 171
     4d2:	29 9f       	mul	r18, r25
     4d4:	91 2d       	mov	r25, r1
     4d6:	11 24       	eor	r1, r1
     4d8:	96 95       	lsr	r25
     4da:	96 95       	lsr	r25
     4dc:	96 95       	lsr	r25
     4de:	89 2f       	mov	r24, r25
     4e0:	88 0f       	add	r24, r24
     4e2:	98 0f       	add	r25, r24
     4e4:	89 2f       	mov	r24, r25
     4e6:	88 0f       	add	r24, r24
     4e8:	88 0f       	add	r24, r24
     4ea:	92 2f       	mov	r25, r18
     4ec:	98 1b       	sub	r25, r24
     4ee:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <disp_temp2>
     4f2:	48 2f       	mov	r20, r24
     4f4:	47 70       	andi	r20, 0x07	; 7
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	2d c0       	rjmp	.+90     	; 0x554 <update_standby_display+0x8e>
     4fa:	28 2f       	mov	r18, r24
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	f9 01       	movw	r30, r18
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	e2 0f       	add	r30, r18
     506:	f3 1f       	adc	r31, r19
     508:	ea 5a       	subi	r30, 0xAA	; 170
     50a:	f7 4c       	sbci	r31, 0xC7	; 199
     50c:	c0 90 41 38 	lds	r12, 0x3841	; 0x803841 <off>
     510:	d0 90 42 38 	lds	r13, 0x3842	; 0x803842 <off+0x1>
     514:	e0 90 43 38 	lds	r14, 0x3843	; 0x803843 <off+0x2>
     518:	c0 82       	st	Z, r12
     51a:	d1 82       	std	Z+1, r13	; 0x01
     51c:	e2 82       	std	Z+2, r14	; 0x02
     51e:	89 13       	cpse	r24, r25
     520:	18 c0       	rjmp	.+48     	; 0x552 <update_standby_display+0x8c>
     522:	64 2f       	mov	r22, r20
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	f9 01       	movw	r30, r18
     528:	ee 0f       	add	r30, r30
     52a:	ff 1f       	adc	r31, r31
     52c:	2e 0f       	add	r18, r30
     52e:	3f 1f       	adc	r19, r31
     530:	f9 01       	movw	r30, r18
     532:	ea 5a       	subi	r30, 0xAA	; 170
     534:	f7 4c       	sbci	r31, 0xC7	; 199
     536:	db 01       	movw	r26, r22
     538:	aa 0f       	add	r26, r26
     53a:	bb 1f       	adc	r27, r27
     53c:	6a 0f       	add	r22, r26
     53e:	7b 1f       	adc	r23, r27
     540:	db 01       	movw	r26, r22
     542:	ad 5e       	subi	r26, 0xED	; 237
     544:	b7 4c       	sbci	r27, 0xC7	; 199
     546:	cd 90       	ld	r12, X+
     548:	dd 90       	ld	r13, X+
     54a:	ec 90       	ld	r14, X
     54c:	c0 82       	st	Z, r12
     54e:	d1 82       	std	Z+1, r13	; 0x01
     550:	e2 82       	std	Z+2, r14	; 0x02
     552:	8f 5f       	subi	r24, 0xFF	; 255
     554:	8c 30       	cpi	r24, 0x0C	; 12
     556:	88 f2       	brcs	.-94     	; 0x4fa <update_standby_display+0x34>
     558:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <disp_temp>
     55c:	8f 5f       	subi	r24, 0xFF	; 255
     55e:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <disp_temp>
     562:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <disp_temp>
     566:	8c 30       	cpi	r24, 0x0C	; 12
     568:	38 f0       	brcs	.+14     	; 0x578 <update_standby_display+0xb2>
     56a:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <disp_temp>
     56e:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <disp_temp2>
     572:	8f 5f       	subi	r24, 0xFF	; 255
     574:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <disp_temp2>
     578:	0e 94 59 02 	call	0x4b2	; 0x4b2 <update_display>
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	08 95       	ret

00000584 <load_standby>:
     584:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <disp_count>
     588:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <disp_temp>
     58c:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <disp_temp2>
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
     596:	0e 94 63 02 	call	0x4c6	; 0x4c6 <update_standby_display>
     59a:	08 95       	ret

0000059c <clear_pixels>:
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	14 c0       	rjmp	.+40     	; 0x5c8 <clear_pixels+0x2c>
     5a0:	82 2f       	mov	r24, r18
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	fc 01       	movw	r30, r24
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	8e 0f       	add	r24, r30
     5ac:	9f 1f       	adc	r25, r31
     5ae:	fc 01       	movw	r30, r24
     5b0:	ea 5a       	subi	r30, 0xAA	; 170
     5b2:	f7 4c       	sbci	r31, 0xC7	; 199
     5b4:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <off>
     5b8:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <off+0x1>
     5bc:	a0 91 43 38 	lds	r26, 0x3843	; 0x803843 <off+0x2>
     5c0:	80 83       	st	Z, r24
     5c2:	91 83       	std	Z+1, r25	; 0x01
     5c4:	a2 83       	std	Z+2, r26	; 0x02
     5c6:	2f 5f       	subi	r18, 0xFF	; 255
     5c8:	2c 30       	cpi	r18, 0x0C	; 12
     5ca:	50 f3       	brcs	.-44     	; 0x5a0 <clear_pixels+0x4>
     5cc:	08 95       	ret

000005ce <update_song_display>:
     5ce:	cf 92       	push	r12
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <disp_temp>
     5d8:	80 ff       	sbrs	r24, 0
     5da:	1c c0       	rjmp	.+56     	; 0x614 <update_song_display+0x46>
     5dc:	e6 e5       	ldi	r30, 0x56	; 86
     5de:	f8 e3       	ldi	r31, 0x38	; 56
     5e0:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <colors+0x12>
     5e4:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <colors+0x13>
     5e8:	a0 91 27 38 	lds	r26, 0x3827	; 0x803827 <colors+0x14>
     5ec:	80 83       	st	Z, r24
     5ee:	91 83       	std	Z+1, r25	; 0x01
     5f0:	a2 83       	std	Z+2, r26	; 0x02
     5f2:	83 83       	std	Z+3, r24	; 0x03
     5f4:	94 83       	std	Z+4, r25	; 0x04
     5f6:	a5 83       	std	Z+5, r26	; 0x05
     5f8:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <off>
     5fc:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <off+0x1>
     600:	a0 91 43 38 	lds	r26, 0x3843	; 0x803843 <off+0x2>
     604:	86 83       	std	Z+6, r24	; 0x06
     606:	97 83       	std	Z+7, r25	; 0x07
     608:	a0 87       	std	Z+8, r26	; 0x08
     60a:	81 87       	std	Z+9, r24	; 0x09
     60c:	92 87       	std	Z+10, r25	; 0x0a
     60e:	a3 87       	std	Z+11, r26	; 0x0b
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	3d c0       	rjmp	.+122    	; 0x68e <update_song_display+0xc0>
     614:	e6 e5       	ldi	r30, 0x56	; 86
     616:	f8 e3       	ldi	r31, 0x38	; 56
     618:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <colors+0x12>
     61c:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <colors+0x13>
     620:	a0 91 27 38 	lds	r26, 0x3827	; 0x803827 <colors+0x14>
     624:	81 87       	std	Z+9, r24	; 0x09
     626:	92 87       	std	Z+10, r25	; 0x0a
     628:	a3 87       	std	Z+11, r26	; 0x0b
     62a:	86 83       	std	Z+6, r24	; 0x06
     62c:	97 83       	std	Z+7, r25	; 0x07
     62e:	a0 87       	std	Z+8, r26	; 0x08
     630:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <off>
     634:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <off+0x1>
     638:	a0 91 43 38 	lds	r26, 0x3843	; 0x803843 <off+0x2>
     63c:	83 83       	std	Z+3, r24	; 0x03
     63e:	94 83       	std	Z+4, r25	; 0x04
     640:	a5 83       	std	Z+5, r26	; 0x05
     642:	80 83       	st	Z, r24
     644:	91 83       	std	Z+1, r25	; 0x01
     646:	a2 83       	std	Z+2, r26	; 0x02
     648:	e3 cf       	rjmp	.-58     	; 0x610 <update_song_display+0x42>
     64a:	84 2f       	mov	r24, r20
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	9c 01       	movw	r18, r24
     650:	2c 5f       	subi	r18, 0xFC	; 252
     652:	3f 4f       	sbci	r19, 0xFF	; 255
     654:	50 91 3b 38 	lds	r21, 0x383B	; 0x80383b <disp_temp>
     658:	85 0f       	add	r24, r21
     65a:	91 1d       	adc	r25, r1
     65c:	87 70       	andi	r24, 0x07	; 7
     65e:	99 27       	eor	r25, r25
     660:	d9 01       	movw	r26, r18
     662:	aa 0f       	add	r26, r26
     664:	bb 1f       	adc	r27, r27
     666:	2a 0f       	add	r18, r26
     668:	3b 1f       	adc	r19, r27
     66a:	d9 01       	movw	r26, r18
     66c:	aa 5a       	subi	r26, 0xAA	; 170
     66e:	b7 4c       	sbci	r27, 0xC7	; 199
     670:	fc 01       	movw	r30, r24
     672:	ee 0f       	add	r30, r30
     674:	ff 1f       	adc	r31, r31
     676:	8e 0f       	add	r24, r30
     678:	9f 1f       	adc	r25, r31
     67a:	fc 01       	movw	r30, r24
     67c:	ed 5e       	subi	r30, 0xED	; 237
     67e:	f7 4c       	sbci	r31, 0xC7	; 199
     680:	c0 80       	ld	r12, Z
     682:	d1 80       	ldd	r13, Z+1	; 0x01
     684:	e2 80       	ldd	r14, Z+2	; 0x02
     686:	cd 92       	st	X+, r12
     688:	dd 92       	st	X+, r13
     68a:	ec 92       	st	X, r14
     68c:	4f 5f       	subi	r20, 0xFF	; 255
     68e:	48 30       	cpi	r20, 0x08	; 8
     690:	e0 f2       	brcs	.-72     	; 0x64a <update_song_display+0x7c>
     692:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <disp_temp>
     696:	8f 5f       	subi	r24, 0xFF	; 255
     698:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <disp_temp>
     69c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <update_display>
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	08 95       	ret

000006a8 <load_nyan>:
     6a8:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <disp_count>
     6ac:	89 e0       	ldi	r24, 0x09	; 9
     6ae:	ea ec       	ldi	r30, 0xCA	; 202
     6b0:	f4 e9       	ldi	r31, 0x94	; 148
     6b2:	a4 e4       	ldi	r26, 0x44	; 68
     6b4:	b8 e3       	ldi	r27, 0x38	; 56
     6b6:	01 90       	ld	r0, Z+
     6b8:	0d 92       	st	X+, r0
     6ba:	8a 95       	dec	r24
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <load_nyan+0xe>
     6be:	89 e0       	ldi	r24, 0x09	; 9
     6c0:	e3 ed       	ldi	r30, 0xD3	; 211
     6c2:	f4 e9       	ldi	r31, 0x94	; 148
     6c4:	ad e4       	ldi	r26, 0x4D	; 77
     6c6:	b8 e3       	ldi	r27, 0x38	; 56
     6c8:	01 90       	ld	r0, Z+
     6ca:	0d 92       	st	X+, r0
     6cc:	8a 95       	dec	r24
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <load_nyan+0x20>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 cb 01 	call	0x396	; 0x396 <load_next_note>
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 cb 01 	call	0x396	; 0x396 <load_next_note>
     6dc:	8c ef       	ldi	r24, 0xFC	; 252
     6de:	91 e2       	ldi	r25, 0x21	; 33
     6e0:	0e 94 af 01 	call	0x35e	; 0x35e <bmp_timer_enable>
     6e4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <update_song_display>
     6e8:	83 e0       	ldi	r24, 0x03	; 3
     6ea:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
     6ee:	08 95       	ret

000006f0 <update_game_standby_display>:
     6f0:	cf 92       	push	r12
     6f2:	df 92       	push	r13
     6f4:	ef 92       	push	r14
     6f6:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <disp_temp>
     6fa:	93 70       	andi	r25, 0x03	; 3
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	30 c0       	rjmp	.+96     	; 0x760 <update_game_standby_display+0x70>
     700:	28 2f       	mov	r18, r24
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	f9 01       	movw	r30, r18
     706:	ee 0f       	add	r30, r30
     708:	ff 1f       	adc	r31, r31
     70a:	e2 0f       	add	r30, r18
     70c:	f3 1f       	adc	r31, r19
     70e:	ea 5a       	subi	r30, 0xAA	; 170
     710:	f7 4c       	sbci	r31, 0xC7	; 199
     712:	c0 90 41 38 	lds	r12, 0x3841	; 0x803841 <off>
     716:	d0 90 42 38 	lds	r13, 0x3842	; 0x803842 <off+0x1>
     71a:	e0 90 43 38 	lds	r14, 0x3843	; 0x803843 <off+0x2>
     71e:	c0 82       	st	Z, r12
     720:	d1 82       	std	Z+1, r13	; 0x01
     722:	e2 82       	std	Z+2, r14	; 0x02
     724:	89 13       	cpse	r24, r25
     726:	1b c0       	rjmp	.+54     	; 0x75e <update_game_standby_display+0x6e>
     728:	f9 01       	movw	r30, r18
     72a:	e4 5f       	subi	r30, 0xF4	; 244
     72c:	f7 4c       	sbci	r31, 0xC7	; 199
     72e:	40 81       	ld	r20, Z
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	f9 01       	movw	r30, r18
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	2e 0f       	add	r18, r30
     73a:	3f 1f       	adc	r19, r31
     73c:	f9 01       	movw	r30, r18
     73e:	ea 5a       	subi	r30, 0xAA	; 170
     740:	f7 4c       	sbci	r31, 0xC7	; 199
     742:	da 01       	movw	r26, r20
     744:	aa 0f       	add	r26, r26
     746:	bb 1f       	adc	r27, r27
     748:	4a 0f       	add	r20, r26
     74a:	5b 1f       	adc	r21, r27
     74c:	da 01       	movw	r26, r20
     74e:	ad 5e       	subi	r26, 0xED	; 237
     750:	b7 4c       	sbci	r27, 0xC7	; 199
     752:	2d 91       	ld	r18, X+
     754:	3d 91       	ld	r19, X+
     756:	4c 91       	ld	r20, X
     758:	20 83       	st	Z, r18
     75a:	31 83       	std	Z+1, r19	; 0x01
     75c:	42 83       	std	Z+2, r20	; 0x02
     75e:	8f 5f       	subi	r24, 0xFF	; 255
     760:	8c 30       	cpi	r24, 0x0C	; 12
     762:	70 f2       	brcs	.-100    	; 0x700 <update_game_standby_display+0x10>
     764:	0e 94 59 02 	call	0x4b2	; 0x4b2 <update_display>
     768:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <disp_temp>
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <disp_temp>
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	08 95       	ret

0000077a <load_game>:

void load_game()
{
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
	disp_count = 0;
     780:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <disp_count>
	game_step = 0;
     784:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <game_step>
	disp_temp = 0;
     788:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <disp_temp>
	game_step_index = 0;
     78c:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <game_step_index>
	free(game_sequence);
     790:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <game_sequence>
     794:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <game_sequence+0x1>
     798:	0e 94 ff 08 	call	0x11fe	; 0x11fe <free>
	game_sequence = (uint8_t *)malloc(game_length);
     79c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <game_length>
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 67 08 	call	0x10ce	; 0x10ce <malloc>
     7a6:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <game_sequence>
     7aa:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <game_sequence+0x1>
// 	uint16_t seed = get_seed();
	srand(TCA0.SINGLE.CNT); //TCA is always running
     7ae:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <noteClocks+0x7f751f>
     7b2:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <noteClocks+0x7f7520>
     7b6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <srand>
	for (uint8_t i = 0; i < game_length; i++)
     7ba:	c0 e0       	ldi	r28, 0x00	; 0
     7bc:	18 c0       	rjmp	.+48     	; 0x7ee <load_game+0x74>
	{
		game_sequence[i] = 0x01 << (rand() % 4);
     7be:	00 91 33 38 	lds	r16, 0x3833	; 0x803833 <game_sequence>
     7c2:	10 91 34 38 	lds	r17, 0x3834	; 0x803834 <game_sequence+0x1>
     7c6:	0c 0f       	add	r16, r28
     7c8:	11 1d       	adc	r17, r1
     7ca:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <rand>
     7ce:	83 70       	andi	r24, 0x03	; 3
     7d0:	90 78       	andi	r25, 0x80	; 128
     7d2:	99 23       	and	r25, r25
     7d4:	24 f4       	brge	.+8      	; 0x7de <load_game+0x64>
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	8c 6f       	ori	r24, 0xFC	; 252
     7da:	9f 6f       	ori	r25, 0xFF	; 255
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <load_game+0x6a>
     7e2:	99 0f       	add	r25, r25
     7e4:	8a 95       	dec	r24
     7e6:	ea f7       	brpl	.-6      	; 0x7e2 <load_game+0x68>
     7e8:	f8 01       	movw	r30, r16
     7ea:	90 83       	st	Z, r25
	game_step_index = 0;
	free(game_sequence);
	game_sequence = (uint8_t *)malloc(game_length);
// 	uint16_t seed = get_seed();
	srand(TCA0.SINGLE.CNT); //TCA is always running
	for (uint8_t i = 0; i < game_length; i++)
     7ec:	cf 5f       	subi	r28, 0xFF	; 255
     7ee:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <game_length>
     7f2:	c8 17       	cp	r28, r24
     7f4:	20 f3       	brcs	.-56     	; 0x7be <load_game+0x44>
	{
		game_sequence[i] = 0x01 << (rand() % 4);
	}
	update_game_standby_display();
     7f6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <update_game_standby_display>
	sao_mode = GameStandbyMode;
     7fa:	85 e0       	ldi	r24, 0x05	; 5
     7fc:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
}
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	08 95       	ret

00000808 <update_game_start_display>:

void update_game_start_display()
{
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14

	uint8_t i = 0;
	uint8_t len = game_length;
     80e:	30 91 0a 38 	lds	r19, 0x380A	; 0x80380a <game_length>
}

void update_game_start_display()
{

	uint8_t i = 0;
     812:	20 e0       	ldi	r18, 0x00	; 0
// 	for (; i < 4; i++)
// 	{
// 		leds[i] = colors[button_color_index[i]];
// 	}
	
	for (; i < LED_COUNT; i++)
     814:	27 c0       	rjmp	.+78     	; 0x864 <update_game_start_display+0x5c>
	{
		leds[i] = off;
     816:	82 2f       	mov	r24, r18
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	fc 01       	movw	r30, r24
     81c:	ee 0f       	add	r30, r30
     81e:	ff 1f       	adc	r31, r31
     820:	e8 0f       	add	r30, r24
     822:	f9 1f       	adc	r31, r25
     824:	ea 5a       	subi	r30, 0xAA	; 170
     826:	f7 4c       	sbci	r31, 0xC7	; 199
     828:	c0 90 41 38 	lds	r12, 0x3841	; 0x803841 <off>
     82c:	d0 90 42 38 	lds	r13, 0x3842	; 0x803842 <off+0x1>
     830:	e0 90 43 38 	lds	r14, 0x3843	; 0x803843 <off+0x2>
     834:	c0 82       	st	Z, r12
     836:	d1 82       	std	Z+1, r13	; 0x01
     838:	e2 82       	std	Z+2, r14	; 0x02
		if (len & 0x01)
     83a:	30 ff       	sbrs	r19, 0
     83c:	11 c0       	rjmp	.+34     	; 0x860 <update_game_start_display+0x58>
		{
			leds[i] = white;
     83e:	fc 01       	movw	r30, r24
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	8e 0f       	add	r24, r30
     846:	9f 1f       	adc	r25, r31
     848:	fc 01       	movw	r30, r24
     84a:	ea 5a       	subi	r30, 0xAA	; 170
     84c:	f7 4c       	sbci	r31, 0xC7	; 199
     84e:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <white>
     852:	90 91 11 38 	lds	r25, 0x3811	; 0x803811 <white+0x1>
     856:	a0 91 12 38 	lds	r26, 0x3812	; 0x803812 <white+0x2>
     85a:	80 83       	st	Z, r24
     85c:	91 83       	std	Z+1, r25	; 0x01
     85e:	a2 83       	std	Z+2, r26	; 0x02
		}
		len >>= 1;
     860:	36 95       	lsr	r19
// 	for (; i < 4; i++)
// 	{
// 		leds[i] = colors[button_color_index[i]];
// 	}
	
	for (; i < LED_COUNT; i++)
     862:	2f 5f       	subi	r18, 0xFF	; 255
     864:	2c 30       	cpi	r18, 0x0C	; 12
     866:	b8 f2       	brcs	.-82     	; 0x816 <update_game_start_display+0xe>
			leds[i] = white;
		}
		len >>= 1;
		
	}
	update_display();
     868:	0e 94 59 02 	call	0x4b2	; 0x4b2 <update_display>
}
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	08 95       	ret

00000874 <play_game_notes>:

void play_game_notes(uint8_t * notes, uint8_t size, SaoStates nextMode)
{
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	ec 01       	movw	r28, r24
     87e:	16 2f       	mov	r17, r22
     880:	04 2f       	mov	r16, r20
	if (!game_temp_flag)
     882:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <game_temp_flag>
     886:	81 11       	cpse	r24, r1
     888:	0f c0       	rjmp	.+30     	; 0x8a8 <play_game_notes+0x34>
	{
		game_temp_flag = 1;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <game_temp_flag>
		ch0_note = 0;
     890:	10 92 3f 38 	sts	0x383F, r1	; 0x80383f <ch0_note>
		ch0_beats = 0;
     894:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <ch0_beats>
		bmp_timer_enable(GAME_BPM_TIMER_PER);
     898:	88 e2       	ldi	r24, 0x28	; 40
     89a:	93 e2       	ldi	r25, 0x23	; 35
     89c:	0e 94 af 01 	call	0x35e	; 0x35e <bmp_timer_enable>
		game_note_count = size;
     8a0:	10 93 30 38 	sts	0x3830, r17	; 0x803830 <game_note_count>
		game_note_index = 0;
     8a4:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <game_note_index>
		
	}
	
	if (ch0_beats == 0)
     8a8:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <ch0_beats>
     8ac:	81 11       	cpse	r24, r1
     8ae:	1f c0       	rjmp	.+62     	; 0x8ee <play_game_notes+0x7a>
	{		
		
		play_note(notes[game_note_index] & 0x3F, 1 << ((notes[game_note_index] & 0xC0) >> 6), 0);
     8b0:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <game_note_index>
     8b4:	fe 01       	movw	r30, r28
     8b6:	e8 0f       	add	r30, r24
     8b8:	f1 1d       	adc	r31, r1
     8ba:	80 81       	ld	r24, Z
     8bc:	82 95       	swap	r24
     8be:	86 95       	lsr	r24
     8c0:	86 95       	lsr	r24
     8c2:	83 70       	andi	r24, 0x03	; 3
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <play_game_notes+0x5a>
     8ca:	66 0f       	add	r22, r22
     8cc:	77 1f       	adc	r23, r23
     8ce:	8a 95       	dec	r24
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <play_game_notes+0x56>
     8d2:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <game_note_index>
     8d6:	c8 0f       	add	r28, r24
     8d8:	d1 1d       	adc	r29, r1
     8da:	88 81       	ld	r24, Y
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	8f 73       	andi	r24, 0x3F	; 63
     8e0:	0e 94 bd 01 	call	0x37a	; 0x37a <play_note>
		game_note_index++;
     8e4:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <game_note_index>
     8e8:	8f 5f       	subi	r24, 0xFF	; 255
     8ea:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <game_note_index>
	}
	
	if (game_note_index == game_note_count)
     8ee:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <game_note_index>
     8f2:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <game_note_count>
     8f6:	98 13       	cpse	r25, r24
     8f8:	08 c0       	rjmp	.+16     	; 0x90a <play_game_notes+0x96>
	{
		game_temp_flag = 0;
     8fa:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <game_temp_flag>
		stop_song();
     8fe:	0e 94 44 02 	call	0x488	; 0x488 <stop_song>
		sao_mode = nextMode;
     902:	00 93 0b 38 	sts	0x380B, r16	; 0x80380b <sao_mode>
		disp_count = 0;
     906:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <disp_count>
	}
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	08 95       	ret

00000914 <activate_button_led>:

void activate_button_led(uint8_t led)
{
	PORTA.OUTTGL = PIN2_bm;
     914:	94 e0       	ldi	r25, 0x04	; 4
     916:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <noteClocks+0x7f6f06>
	for(uint8_t i = 0; i < LED_COUNT; i++)
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	14 c0       	rjmp	.+40     	; 0x946 <activate_button_led+0x32>
	{
		leds[i] = off;
     91e:	29 2f       	mov	r18, r25
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	f9 01       	movw	r30, r18
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	2e 0f       	add	r18, r30
     92a:	3f 1f       	adc	r19, r31
     92c:	f9 01       	movw	r30, r18
     92e:	ea 5a       	subi	r30, 0xAA	; 170
     930:	f7 4c       	sbci	r31, 0xC7	; 199
     932:	20 91 41 38 	lds	r18, 0x3841	; 0x803841 <off>
     936:	30 91 42 38 	lds	r19, 0x3842	; 0x803842 <off+0x1>
     93a:	40 91 43 38 	lds	r20, 0x3843	; 0x803843 <off+0x2>
     93e:	20 83       	st	Z, r18
     940:	31 83       	std	Z+1, r19	; 0x01
     942:	42 83       	std	Z+2, r20	; 0x02
}

void activate_button_led(uint8_t led)
{
	PORTA.OUTTGL = PIN2_bm;
	for(uint8_t i = 0; i < LED_COUNT; i++)
     944:	9f 5f       	subi	r25, 0xFF	; 255
     946:	9c 30       	cpi	r25, 0x0C	; 12
     948:	50 f3       	brcs	.-44     	; 0x91e <activate_button_led+0xa>
	{
		leds[i] = off;
	}
	leds[led] = colors[button_color_index[led]];
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	fc 01       	movw	r30, r24
     94e:	e4 5f       	subi	r30, 0xF4	; 244
     950:	f7 4c       	sbci	r31, 0xC7	; 199
     952:	20 81       	ld	r18, Z
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	fc 01       	movw	r30, r24
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	8e 0f       	add	r24, r30
     95e:	9f 1f       	adc	r25, r31
     960:	fc 01       	movw	r30, r24
     962:	ea 5a       	subi	r30, 0xAA	; 170
     964:	f7 4c       	sbci	r31, 0xC7	; 199
     966:	d9 01       	movw	r26, r18
     968:	aa 0f       	add	r26, r26
     96a:	bb 1f       	adc	r27, r27
     96c:	2a 0f       	add	r18, r26
     96e:	3b 1f       	adc	r19, r27
     970:	d9 01       	movw	r26, r18
     972:	ad 5e       	subi	r26, 0xED	; 237
     974:	b7 4c       	sbci	r27, 0xC7	; 199
     976:	8d 91       	ld	r24, X+
     978:	9d 91       	ld	r25, X+
     97a:	ac 91       	ld	r26, X
     97c:	80 83       	st	Z, r24
     97e:	91 83       	std	Z+1, r25	; 0x01
     980:	a2 83       	std	Z+2, r26	; 0x02
	
	update_display();
     982:	0e 94 59 02 	call	0x4b2	; 0x4b2 <update_display>
     986:	08 95       	ret

00000988 <get_button_number>:
}

uint8_t get_button_number(uint8_t button)
{
     988:	98 2f       	mov	r25, r24
	uint8_t i = 0;
     98a:	80 e0       	ldi	r24, 0x00	; 0
	
	for(; i < 8; i++)
     98c:	0e c0       	rjmp	.+28     	; 0x9aa <get_button_number+0x22>
	{
		if ((1 << i) == button)
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	08 2e       	mov	r0, r24
     994:	02 c0       	rjmp	.+4      	; 0x99a <get_button_number+0x12>
     996:	22 0f       	add	r18, r18
     998:	33 1f       	adc	r19, r19
     99a:	0a 94       	dec	r0
     99c:	e2 f7       	brpl	.-8      	; 0x996 <get_button_number+0xe>
     99e:	49 2f       	mov	r20, r25
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	24 17       	cp	r18, r20
     9a4:	35 07       	cpc	r19, r21
     9a6:	19 f0       	breq	.+6      	; 0x9ae <get_button_number+0x26>

uint8_t get_button_number(uint8_t button)
{
	uint8_t i = 0;
	
	for(; i < 8; i++)
     9a8:	8f 5f       	subi	r24, 0xFF	; 255
     9aa:	88 30       	cpi	r24, 0x08	; 8
     9ac:	80 f3       	brcs	.-32     	; 0x98e <get_button_number+0x6>
			break;
		}
	}
	
	return i;
}
     9ae:	08 95       	ret

000009b0 <show_game_pattern>:

void show_game_pattern() 
{
     9b0:	cf 93       	push	r28
	uint8_t button_num;
	if (game_temp_flag)
     9b2:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <game_temp_flag>
     9b6:	88 23       	and	r24, r24
     9b8:	d1 f0       	breq	.+52     	; 0x9ee <show_game_pattern+0x3e>
	{
		//Already played the pattern item, so clear and pause
		game_temp_flag = 0;
     9ba:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <game_temp_flag>
		clear_pixels();
     9be:	0e 94 ce 02 	call	0x59c	; 0x59c <clear_pixels>
		update_display();
     9c2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <update_display>
		stop_song();
     9c6:	0e 94 44 02 	call	0x488	; 0x488 <stop_song>
		
		if (game_step_index > game_step)
     9ca:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <game_step_index>
     9ce:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <game_step>
     9d2:	89 17       	cp	r24, r25
     9d4:	88 f5       	brcc	.+98     	; 0xa38 <show_game_pattern+0x88>
		{
			sao_mode = GamePlayerMode;
     9d6:	88 e0       	ldi	r24, 0x08	; 8
     9d8:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
			game_temp_flag = 0;
     9dc:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <game_temp_flag>
			game_step_index = 0;
     9e0:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <game_step_index>
			game_timer = 0;
     9e4:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <__data_end>
     9e8:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <__data_end+0x1>
			return; //Important so game_step_index does not get incremented again
     9ec:	25 c0       	rjmp	.+74     	; 0xa38 <show_game_pattern+0x88>
		}
	}
	else
	{
		game_temp_flag = 1;
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <game_temp_flag>
		button_num = get_button_number(game_sequence[game_step_index]);
     9f4:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <game_step_index>
     9f8:	e0 91 33 38 	lds	r30, 0x3833	; 0x803833 <game_sequence>
     9fc:	f0 91 34 38 	lds	r31, 0x3834	; 0x803834 <game_sequence+0x1>
     a00:	e8 0f       	add	r30, r24
     a02:	f1 1d       	adc	r31, r1
     a04:	80 81       	ld	r24, Z
     a06:	0e 94 c4 04 	call	0x988	; 0x988 <get_button_number>
     a0a:	c8 2f       	mov	r28, r24
		play_note(gameButtonNotes[button_num] & 0x3f, 8, 0);
     a0c:	e8 2f       	mov	r30, r24
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	e4 52       	subi	r30, 0x24	; 36
     a12:	fb 46       	sbci	r31, 0x6B	; 107
     a14:	80 81       	ld	r24, Z
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	68 e0       	ldi	r22, 0x08	; 8
     a1a:	8f 73       	andi	r24, 0x3F	; 63
     a1c:	0e 94 bd 01 	call	0x37a	; 0x37a <play_note>
		activate_button_led(button_num);
     a20:	8c 2f       	mov	r24, r28
     a22:	0e 94 8a 04 	call	0x914	; 0x914 <activate_button_led>
		bmp_timer_enable(GAME_BPM_TIMER_PER);
     a26:	88 e2       	ldi	r24, 0x28	; 40
     a28:	93 e2       	ldi	r25, 0x23	; 35
     a2a:	0e 94 af 01 	call	0x35e	; 0x35e <bmp_timer_enable>
		game_step_index++;
     a2e:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <game_step_index>
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <game_step_index>
	}
	

	
}
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <handle_game_input>:

void handle_game_input()
{
     a3c:	cf 93       	push	r28
	//First check if the button is correct
	uint8_t button_num;
	if (button_held & (BUTTON_0 | BUTTON_1 | BUTTON_2 | BUTTON_3))
     a3e:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <button_held>
     a42:	8f 70       	andi	r24, 0x0F	; 15
     a44:	a9 f1       	breq	.+106    	; 0xab0 <handle_game_input+0x74>
	{
		game_timer = 0;	
     a46:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <__data_end>
     a4a:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <__data_end+0x1>
		
		if (button_held != game_sequence[game_step_index])
     a4e:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <game_step_index>
     a52:	e0 91 33 38 	lds	r30, 0x3833	; 0x803833 <game_sequence>
     a56:	f0 91 34 38 	lds	r31, 0x3834	; 0x803834 <game_sequence+0x1>
     a5a:	e8 0f       	add	r30, r24
     a5c:	f1 1d       	adc	r31, r1
     a5e:	90 81       	ld	r25, Z
     a60:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <button_held>
     a64:	98 17       	cp	r25, r24
     a66:	21 f0       	breq	.+8      	; 0xa70 <handle_game_input+0x34>
		{
			sao_mode = GameLostMode;
     a68:	8a e0       	ldi	r24, 0x0A	; 10
     a6a:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
			return; //Important to return immediately 
     a6e:	5e c0       	rjmp	.+188    	; 0xb2c <handle_game_input+0xf0>
		}
		button_num = get_button_number(button_held);
     a70:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <button_held>
     a74:	0e 94 c4 04 	call	0x988	; 0x988 <get_button_number>
     a78:	c8 2f       	mov	r28, r24
		play_note(gameButtonNotes[button_num], 1, 0);
     a7a:	e8 2f       	mov	r30, r24
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	e4 52       	subi	r30, 0x24	; 36
     a80:	fb 46       	sbci	r31, 0x6B	; 107
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	80 81       	ld	r24, Z
     a88:	0e 94 bd 01 	call	0x37a	; 0x37a <play_note>
		if (button_held != game_temp_flag)
     a8c:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <button_held>
     a90:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <game_temp_flag>
     a94:	98 17       	cp	r25, r24
     a96:	19 f0       	breq	.+6      	; 0xa9e <handle_game_input+0x62>
		{
			activate_button_led(button_num);	
     a98:	8c 2f       	mov	r24, r28
     a9a:	0e 94 8a 04 	call	0x914	; 0x914 <activate_button_led>
		}
		game_temp_flag = button_held;
     a9e:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <button_held>
     aa2:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <game_temp_flag>
		bmp_timer_enable(GAME_BPM_TIMER_PER);
     aa6:	88 e2       	ldi	r24, 0x28	; 40
     aa8:	93 e2       	ldi	r25, 0x23	; 35
     aaa:	0e 94 af 01 	call	0x35e	; 0x35e <bmp_timer_enable>
     aae:	3c c0       	rjmp	.+120    	; 0xb28 <handle_game_input+0xec>
	else
	{
		

		
		if (game_temp_flag)
     ab0:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <game_temp_flag>
     ab4:	88 23       	and	r24, r24
     ab6:	59 f1       	breq	.+86     	; 0xb0e <handle_game_input+0xd2>
		{
			
			
			//we will only get here if the button that was being pressed was correct
			stop_song();	
     ab8:	0e 94 44 02 	call	0x488	; 0x488 <stop_song>
			clear_pixels();
     abc:	0e 94 ce 02 	call	0x59c	; 0x59c <clear_pixels>
			update_display();		
     ac0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <update_display>
			game_timer = 0;	
     ac4:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <__data_end>
     ac8:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <__data_end+0x1>
			game_step_index++;	
     acc:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <game_step_index>
     ad0:	8f 5f       	subi	r24, 0xFF	; 255
     ad2:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <game_step_index>
			
			if (game_step_index > game_step)
     ad6:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <game_step_index>
     ada:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <game_step>
     ade:	89 17       	cp	r24, r25
     ae0:	b0 f4       	brcc	.+44     	; 0xb0e <handle_game_input+0xd2>
			{
				game_step++;
     ae2:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <game_step>
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <game_step>
				
				if (game_step == game_length)
     aec:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <game_step>
     af0:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <game_length>
     af4:	98 13       	cpse	r25, r24
     af6:	06 c0       	rjmp	.+12     	; 0xb04 <handle_game_input+0xc8>
				{
					update_game_length();
     af8:	0e 94 97 01 	call	0x32e	; 0x32e <update_game_length>
					sao_mode = GameWonMode;
     afc:	89 e0       	ldi	r24, 0x09	; 9
     afe:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <handle_game_input+0xd2>
				}
				else
				{
					game_step_index = 0;
     b04:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <game_step_index>
					sao_mode = GameShowPatternMode;	
     b08:	87 e0       	ldi	r24, 0x07	; 7
     b0a:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
			
			
				
		}			

		game_temp_flag = 0;
     b0e:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <game_temp_flag>
		
		if (game_timer >= GAME_MAX_WAIT)
     b12:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <__data_end>
     b16:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <__data_end+0x1>
     b1a:	84 3f       	cpi	r24, 0xF4	; 244
     b1c:	91 40       	sbci	r25, 0x01	; 1
     b1e:	20 f0       	brcs	.+8      	; 0xb28 <handle_game_input+0xec>
		{
			sao_mode = GameLostMode;
     b20:	8a e0       	ldi	r24, 0x0A	; 10
     b22:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
			return;
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <handle_game_input+0xf0>
		}		
	}
	
	disp_count = 0;
     b28:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <disp_count>
}
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <update_game_won_display>:

void update_game_won_display()
{
     b30:	cf 92       	push	r12
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
	uint8_t i = 0;
	
	if (disp_temp % 2)
     b36:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <disp_temp>
     b3a:	80 ff       	sbrs	r24, 0
     b3c:	22 c0       	rjmp	.+68     	; 0xb82 <update_game_won_display+0x52>
	{
		clear_pixels();
     b3e:	0e 94 ce 02 	call	0x59c	; 0x59c <clear_pixels>
     b42:	39 c0       	rjmp	.+114    	; 0xbb6 <update_game_won_display+0x86>
	}
	else
	{
		for (;i < 4; i++)	
		{
			leds[i] = colors[button_color_index[i]];
     b44:	42 2f       	mov	r20, r18
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	fa 01       	movw	r30, r20
     b4a:	e4 5f       	subi	r30, 0xF4	; 244
     b4c:	f7 4c       	sbci	r31, 0xC7	; 199
     b4e:	80 81       	ld	r24, Z
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	da 01       	movw	r26, r20
     b54:	aa 0f       	add	r26, r26
     b56:	bb 1f       	adc	r27, r27
     b58:	4a 0f       	add	r20, r26
     b5a:	5b 1f       	adc	r21, r27
     b5c:	da 01       	movw	r26, r20
     b5e:	aa 5a       	subi	r26, 0xAA	; 170
     b60:	b7 4c       	sbci	r27, 0xC7	; 199
     b62:	fc 01       	movw	r30, r24
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	8e 0f       	add	r24, r30
     b6a:	9f 1f       	adc	r25, r31
     b6c:	fc 01       	movw	r30, r24
     b6e:	ed 5e       	subi	r30, 0xED	; 237
     b70:	f7 4c       	sbci	r31, 0xC7	; 199
     b72:	c0 80       	ld	r12, Z
     b74:	d1 80       	ldd	r13, Z+1	; 0x01
     b76:	e2 80       	ldd	r14, Z+2	; 0x02
     b78:	cd 92       	st	X+, r12
     b7a:	dd 92       	st	X+, r13
     b7c:	ec 92       	st	X, r14
	{
		clear_pixels();
	}
	else
	{
		for (;i < 4; i++)	
     b7e:	2f 5f       	subi	r18, 0xFF	; 255
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <update_game_won_display+0x54>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	24 30       	cpi	r18, 0x04	; 4
     b86:	f0 f2       	brcs	.-68     	; 0xb44 <update_game_won_display+0x14>
     b88:	14 c0       	rjmp	.+40     	; 0xbb2 <update_game_won_display+0x82>
			leds[i] = colors[button_color_index[i]];
		}
		
		for (;i < LED_COUNT; i++)
		{
			leds[i] = white;
     b8a:	82 2f       	mov	r24, r18
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	fc 01       	movw	r30, r24
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	8e 0f       	add	r24, r30
     b96:	9f 1f       	adc	r25, r31
     b98:	fc 01       	movw	r30, r24
     b9a:	ea 5a       	subi	r30, 0xAA	; 170
     b9c:	f7 4c       	sbci	r31, 0xC7	; 199
     b9e:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <white>
     ba2:	90 91 11 38 	lds	r25, 0x3811	; 0x803811 <white+0x1>
     ba6:	a0 91 12 38 	lds	r26, 0x3812	; 0x803812 <white+0x2>
     baa:	80 83       	st	Z, r24
     bac:	91 83       	std	Z+1, r25	; 0x01
     bae:	a2 83       	std	Z+2, r26	; 0x02
		for (;i < 4; i++)	
		{
			leds[i] = colors[button_color_index[i]];
		}
		
		for (;i < LED_COUNT; i++)
     bb0:	2f 5f       	subi	r18, 0xFF	; 255
     bb2:	2c 30       	cpi	r18, 0x0C	; 12
     bb4:	50 f3       	brcs	.-44     	; 0xb8a <update_game_won_display+0x5a>
		{
			leds[i] = white;
		}
	}
	
	update_display();
     bb6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <update_display>
	disp_temp++;
     bba:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <disp_temp>
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <disp_temp>
}
     bc4:	ef 90       	pop	r14
     bc6:	df 90       	pop	r13
     bc8:	cf 90       	pop	r12
     bca:	08 95       	ret

00000bcc <update_game_lost_display>:

void update_game_lost_display()
{
	uint8_t i = 0;
	
	if (disp_temp % 2)
     bcc:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <disp_temp>
     bd0:	80 ff       	sbrs	r24, 0
     bd2:	18 c0       	rjmp	.+48     	; 0xc04 <update_game_lost_display+0x38>
	{
		clear_pixels();
     bd4:	0e 94 ce 02 	call	0x59c	; 0x59c <clear_pixels>
     bd8:	18 c0       	rjmp	.+48     	; 0xc0a <update_game_lost_display+0x3e>
	}
	else
	{
		for (;i < LED_COUNT; i++)
		{
			leds[i] = colors[RED_c];
     bda:	82 2f       	mov	r24, r18
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	fc 01       	movw	r30, r24
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	8e 0f       	add	r24, r30
     be6:	9f 1f       	adc	r25, r31
     be8:	fc 01       	movw	r30, r24
     bea:	ea 5a       	subi	r30, 0xAA	; 170
     bec:	f7 4c       	sbci	r31, 0xC7	; 199
     bee:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <colors>
     bf2:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <colors+0x1>
     bf6:	a0 91 15 38 	lds	r26, 0x3815	; 0x803815 <colors+0x2>
     bfa:	80 83       	st	Z, r24
     bfc:	91 83       	std	Z+1, r25	; 0x01
     bfe:	a2 83       	std	Z+2, r26	; 0x02
	{
		clear_pixels();
	}
	else
	{
		for (;i < LED_COUNT; i++)
     c00:	2f 5f       	subi	r18, 0xFF	; 255
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <update_game_lost_display+0x3a>
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	2c 30       	cpi	r18, 0x0C	; 12
     c08:	40 f3       	brcs	.-48     	; 0xbda <update_game_lost_display+0xe>
		{
			leds[i] = colors[RED_c];
		}		
	}
	
	update_display();
     c0a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <update_display>
	disp_temp++;
     c0e:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <disp_temp>
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <disp_temp>
     c18:	08 95       	ret

00000c1a <get_button_pressed>:
}

uint8_t get_button_pressed()
{
	uint8_t in = (PORTC.IN & (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm)) | (PORTB.IN & PIN5_bm );
     c1a:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <noteClocks+0x7f6f47>
     c1e:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <noteClocks+0x7f6f27>
     c22:	9f 70       	andi	r25, 0x0F	; 15
     c24:	80 72       	andi	r24, 0x20	; 32
     c26:	89 2b       	or	r24, r25

	//This should stop other button presses from interfering 
	//Have to negate "in" because buttons are active low
	if (button_held & ~in)
     c28:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <button_held>
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	a9 01       	movw	r20, r18
     c32:	40 95       	com	r20
     c34:	50 95       	com	r21
     c36:	29 2f       	mov	r18, r25
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	24 23       	and	r18, r20
     c3c:	35 23       	and	r19, r21
     c3e:	23 2b       	or	r18, r19
     c40:	19 f0       	breq	.+6      	; 0xc48 <get_button_pressed+0x2e>
	{
		return button_held;
     c42:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <button_held>
     c46:	08 95       	ret
	}

	if (!(in & PIN0_bm))
     c48:	80 ff       	sbrs	r24, 0
     c4a:	0a c0       	rjmp	.+20     	; 0xc60 <get_button_pressed+0x46>
	{
		return BUTTON_0;
	}

	if (!(in & PIN1_bm))
     c4c:	81 ff       	sbrs	r24, 1
     c4e:	0a c0       	rjmp	.+20     	; 0xc64 <get_button_pressed+0x4a>
	{
		return BUTTON_1;
	}

	if (!(in & PIN2_bm))
     c50:	82 ff       	sbrs	r24, 2
     c52:	0a c0       	rjmp	.+20     	; 0xc68 <get_button_pressed+0x4e>
	{
		return BUTTON_2;
	}

	if (!(in & PIN3_bm))
     c54:	83 ff       	sbrs	r24, 3
     c56:	0a c0       	rjmp	.+20     	; 0xc6c <get_button_pressed+0x52>
	{
		return BUTTON_3;
	}

	if (!(in & PIN5_bm))
     c58:	80 72       	andi	r24, 0x20	; 32
     c5a:	51 f4       	brne	.+20     	; 0xc70 <get_button_pressed+0x56>
	{
		return BUTTON_SONG;
     c5c:	80 e2       	ldi	r24, 0x20	; 32
     c5e:	08 95       	ret
		return button_held;
	}

	if (!(in & PIN0_bm))
	{
		return BUTTON_0;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	08 95       	ret
	}

	if (!(in & PIN1_bm))
	{
		return BUTTON_1;
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	08 95       	ret
	}

	if (!(in & PIN2_bm))
	{
		return BUTTON_2;
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	08 95       	ret
	}

	if (!(in & PIN3_bm))
	{
		return BUTTON_3;
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	08 95       	ret
	if (!(in & PIN5_bm))
	{
		return BUTTON_SONG;
	}	
	
	return 0;
     c70:	80 e0       	ldi	r24, 0x00	; 0
}
     c72:	08 95       	ret

00000c74 <check_buttons>:

void check_buttons()
{
	if (!(button_down))
     c74:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <button_down>
     c78:	81 11       	cpse	r24, r1
     c7a:	13 c0       	rjmp	.+38     	; 0xca2 <check_buttons+0x2e>
	{
		button_down = get_button_pressed();
     c7c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <get_button_pressed>
     c80:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <button_down>
				
		if (button_held && !button_down) //button was released
     c84:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <button_held>
     c88:	88 23       	and	r24, r24
     c8a:	d9 f0       	breq	.+54     	; 0xcc2 <check_buttons+0x4e>
     c8c:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <button_down>
     c90:	81 11       	cpse	r24, r1
     c92:	17 c0       	rjmp	.+46     	; 0xcc2 <check_buttons+0x4e>
		{
			button_action = button_held;
     c94:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <button_held>
     c98:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <button_action>
			button_held = 0;
     c9c:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <button_held>
     ca0:	08 95       	ret
		}							
	}
	else
	{		
		if (debounce_count >= DEBOUNCE_PER)
     ca2:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <debounce_count>
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	60 f0       	brcs	.+24     	; 0xcc2 <check_buttons+0x4e>
		{				
			if (button_down == get_button_pressed())
     caa:	0e 94 0d 06 	call	0xc1a	; 0xc1a <get_button_pressed>
     cae:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <button_down>
     cb2:	89 13       	cpse	r24, r25
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <check_buttons+0x4a>
			{					
				button_held = button_down;			
     cb6:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <button_down>
     cba:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <button_held>
			}

			button_down = 0;
     cbe:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <button_down>
     cc2:	08 95       	ret

00000cc4 <run_state>:



void run_state()
{
	switch (sao_mode)
     cc4:	e0 91 0b 38 	lds	r30, 0x380B	; 0x80380b <sao_mode>
     cc8:	8e 2f       	mov	r24, r30
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	8b 30       	cpi	r24, 0x0B	; 11
     cce:	91 05       	cpc	r25, r1
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <run_state+0x10>
     cd2:	bd c0       	rjmp	.+378    	; 0xe4e <run_state+0x18a>
     cd4:	fc 01       	movw	r30, r24
     cd6:	e2 5c       	subi	r30, 0xC2	; 194
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__tablejump2__>
	{
		case InitStandbyMode:
			load_standby();
     cde:	0e 94 c2 02 	call	0x584	; 0x584 <load_standby>
			break;
     ce2:	b5 c0       	rjmp	.+362    	; 0xe4e <run_state+0x18a>
		case StandbyMode:
			if (!insert_button_pressed)
     ce4:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <insert_button_pressed>
     ce8:	81 11       	cpse	r24, r1
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <run_state+0x30>
			{
				sao_mode = InitGameMode;
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
				break;
     cf2:	ad c0       	rjmp	.+346    	; 0xe4e <run_state+0x18a>
			}
			
			if (button_action == BUTTON_SONG)
     cf4:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <button_action>
     cf8:	80 32       	cpi	r24, 0x20	; 32
     cfa:	21 f4       	brne	.+8      	; 0xd04 <run_state+0x40>
			{
				sao_mode = InitSongMode;				
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
				break;
     d02:	a5 c0       	rjmp	.+330    	; 0xe4e <run_state+0x18a>
			}
			
			if (disp_count == STANDBY_DISP_PER)
     d04:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <disp_count>
     d08:	85 30       	cpi	r24, 0x05	; 5
     d0a:	09 f0       	breq	.+2      	; 0xd0e <run_state+0x4a>
     d0c:	a0 c0       	rjmp	.+320    	; 0xe4e <run_state+0x18a>
			{
				disp_count = 0;
     d0e:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <disp_count>
				update_standby_display();
     d12:	0e 94 63 02 	call	0x4c6	; 0x4c6 <update_standby_display>
     d16:	9b c0       	rjmp	.+310    	; 0xe4e <run_state+0x18a>
			}
			break;
		case InitSongMode:
			load_nyan();
     d18:	0e 94 54 03 	call	0x6a8	; 0x6a8 <load_nyan>
			break;
     d1c:	98 c0       	rjmp	.+304    	; 0xe4e <run_state+0x18a>
		case SongMode:
		
			if (button_action == BUTTON_SONG)
     d1e:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <button_action>
     d22:	80 32       	cpi	r24, 0x20	; 32
     d24:	59 f4       	brne	.+22     	; 0xd3c <run_state+0x78>
			{
				if (insert_button_pressed)
     d26:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <insert_button_pressed>
     d2a:	88 23       	and	r24, r24
     d2c:	19 f0       	breq	.+6      	; 0xd34 <run_state+0x70>
				{
					sao_mode = InitStandbyMode;
     d2e:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <sao_mode>
     d32:	8d c0       	rjmp	.+282    	; 0xe4e <run_state+0x18a>
				}
				else
				{
					sao_mode = InitGameMode;
     d34:	84 e0       	ldi	r24, 0x04	; 4
     d36:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
     d3a:	89 c0       	rjmp	.+274    	; 0xe4e <run_state+0x18a>
				}				
				break;
			}
		
			if (disp_count == SONG_DISP_PER)
     d3c:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <disp_count>
     d40:	89 31       	cpi	r24, 0x19	; 25
     d42:	09 f0       	breq	.+2      	; 0xd46 <run_state+0x82>
     d44:	84 c0       	rjmp	.+264    	; 0xe4e <run_state+0x18a>
			{
				disp_count = 0;
     d46:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <disp_count>
				update_song_display();
     d4a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <update_song_display>
     d4e:	7f c0       	rjmp	.+254    	; 0xe4e <run_state+0x18a>
			}
			break;
		case InitGameMode:
			load_game();
     d50:	0e 94 bd 03 	call	0x77a	; 0x77a <load_game>
			break;
     d54:	7c c0       	rjmp	.+248    	; 0xe4e <run_state+0x18a>
		case GameStandbyMode:
		
			if (insert_button_pressed)
     d56:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <insert_button_pressed>
     d5a:	88 23       	and	r24, r24
     d5c:	19 f0       	breq	.+6      	; 0xd64 <run_state+0xa0>
			{
				sao_mode = InitStandbyMode;
     d5e:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <sao_mode>
				break;
     d62:	75 c0       	rjmp	.+234    	; 0xe4e <run_state+0x18a>
			}
		
			if (button_action == BUTTON_SONG)
     d64:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <button_action>
     d68:	80 32       	cpi	r24, 0x20	; 32
     d6a:	21 f4       	brne	.+8      	; 0xd74 <run_state+0xb0>
			{
				sao_mode = InitSongMode;				
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
				break;
     d72:	6d c0       	rjmp	.+218    	; 0xe4e <run_state+0x18a>
			}
			
			if (button_action & (BUTTON_0 | BUTTON_1 | BUTTON_2 | BUTTON_3))
     d74:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <button_action>
     d78:	8f 70       	andi	r24, 0x0F	; 15
     d7a:	21 f0       	breq	.+8      	; 0xd84 <run_state+0xc0>
			{
				sao_mode = StartGame;				
     d7c:	86 e0       	ldi	r24, 0x06	; 6
     d7e:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
				break;
     d82:	65 c0       	rjmp	.+202    	; 0xe4e <run_state+0x18a>
			}
		
			if (disp_count == GAME_STANDBY_DISP_PER)
     d84:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <disp_count>
     d88:	82 33       	cpi	r24, 0x32	; 50
     d8a:	09 f0       	breq	.+2      	; 0xd8e <run_state+0xca>
     d8c:	60 c0       	rjmp	.+192    	; 0xe4e <run_state+0x18a>
			{
				disp_count = 0;
     d8e:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <disp_count>
				update_game_standby_display();
     d92:	0e 94 78 03 	call	0x6f0	; 0x6f0 <update_game_standby_display>
     d96:	5b c0       	rjmp	.+182    	; 0xe4e <run_state+0x18a>
			}
			break;
		case StartGame:
			
			if (insert_button_pressed)
     d98:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <insert_button_pressed>
     d9c:	88 23       	and	r24, r24
     d9e:	19 f0       	breq	.+6      	; 0xda6 <run_state+0xe2>
			{
				sao_mode = InitStandbyMode;
     da0:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <sao_mode>
				break;
     da4:	54 c0       	rjmp	.+168    	; 0xe4e <run_state+0x18a>
			}

			if (!game_temp_flag)
     da6:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <game_temp_flag>
     daa:	81 11       	cpse	r24, r1
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <run_state+0xee>
			{
				
				update_game_start_display();
     dae:	0e 94 04 04 	call	0x808	; 0x808 <update_game_start_display>
			}
									
			play_game_notes(gameStartupNotes, GAME_START_SIZE, GameShowPatternMode);
     db2:	47 e0       	ldi	r20, 0x07	; 7
     db4:	62 e1       	ldi	r22, 0x12	; 18
     db6:	8f ee       	ldi	r24, 0xEF	; 239
     db8:	94 e9       	ldi	r25, 0x94	; 148
     dba:	0e 94 3a 04 	call	0x874	; 0x874 <play_game_notes>
			break;
     dbe:	47 c0       	rjmp	.+142    	; 0xe4e <run_state+0x18a>
		case GameShowPatternMode:
		
			if (insert_button_pressed)
     dc0:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <insert_button_pressed>
     dc4:	88 23       	and	r24, r24
     dc6:	19 f0       	breq	.+6      	; 0xdce <run_state+0x10a>
			{
				sao_mode = InitStandbyMode;
     dc8:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <sao_mode>
				break;
     dcc:	40 c0       	rjmp	.+128    	; 0xe4e <run_state+0x18a>
			}
					
			if (button_action == BUTTON_SONG)
     dce:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <button_action>
     dd2:	80 32       	cpi	r24, 0x20	; 32
     dd4:	21 f4       	brne	.+8      	; 0xdde <run_state+0x11a>
			{
				sao_mode = InitSongMode;				
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
				break;
     ddc:	38 c0       	rjmp	.+112    	; 0xe4e <run_state+0x18a>
			}
			
			if (disp_count == GAME_SHOW_PATTERN_PER)
     dde:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <disp_count>
     de2:	83 32       	cpi	r24, 0x23	; 35
     de4:	a1 f5       	brne	.+104    	; 0xe4e <run_state+0x18a>
			{
				disp_count = 0;
     de6:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <disp_count>
				show_game_pattern();
     dea:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <show_game_pattern>
     dee:	2f c0       	rjmp	.+94     	; 0xe4e <run_state+0x18a>
			}
						
			break;
		case GamePlayerMode:
		
			if (insert_button_pressed)
     df0:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <insert_button_pressed>
     df4:	88 23       	and	r24, r24
     df6:	19 f0       	breq	.+6      	; 0xdfe <run_state+0x13a>
			{
				sao_mode = InitStandbyMode;
     df8:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <sao_mode>
				break;
     dfc:	28 c0       	rjmp	.+80     	; 0xe4e <run_state+0x18a>
			}
					
			if (button_action == BUTTON_SONG)
     dfe:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <button_action>
     e02:	80 32       	cpi	r24, 0x20	; 32
     e04:	21 f4       	brne	.+8      	; 0xe0e <run_state+0x14a>
			{
				sao_mode = InitSongMode;				
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <sao_mode>
				break;
     e0c:	20 c0       	rjmp	.+64     	; 0xe4e <run_state+0x18a>
			}
			
			handle_game_input();
     e0e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <handle_game_input>
			
			break;
     e12:	1d c0       	rjmp	.+58     	; 0xe4e <run_state+0x18a>
		case GameWonMode:
			play_game_notes(gameWonNotes, GAME_WON_SIZE, InitGameMode);
     e14:	44 e0       	ldi	r20, 0x04	; 4
     e16:	6a e0       	ldi	r22, 0x0A	; 10
     e18:	85 ee       	ldi	r24, 0xE5	; 229
     e1a:	94 e9       	ldi	r25, 0x94	; 148
     e1c:	0e 94 3a 04 	call	0x874	; 0x874 <play_game_notes>
			if (disp_count == GAME_WON_DISP_PER)
     e20:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <disp_count>
     e24:	8f 30       	cpi	r24, 0x0F	; 15
     e26:	99 f4       	brne	.+38     	; 0xe4e <run_state+0x18a>
			{
				disp_count = 0;
     e28:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <disp_count>
				update_game_won_display();
     e2c:	0e 94 98 05 	call	0xb30	; 0xb30 <update_game_won_display>
     e30:	0e c0       	rjmp	.+28     	; 0xe4e <run_state+0x18a>
			}			
			break;
		case GameLostMode:
			play_game_notes(gameLostNotes, GAME_LOST_SIZE, InitGameMode);
     e32:	44 e0       	ldi	r20, 0x04	; 4
     e34:	65 e0       	ldi	r22, 0x05	; 5
     e36:	80 ee       	ldi	r24, 0xE0	; 224
     e38:	94 e9       	ldi	r25, 0x94	; 148
     e3a:	0e 94 3a 04 	call	0x874	; 0x874 <play_game_notes>
			if (disp_count == GAME_LOST_DISP_PER)
     e3e:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <disp_count>
     e42:	8f 30       	cpi	r24, 0x0F	; 15
     e44:	21 f4       	brne	.+8      	; 0xe4e <run_state+0x18a>
			{
				disp_count = 0;
     e46:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <disp_count>
				update_game_lost_display();
     e4a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <update_game_lost_display>
			}					
			break;
		
	}
	
	if (insert_button_pressed || sao_mode == SongMode)
     e4e:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <insert_button_pressed>
     e52:	81 11       	cpse	r24, r1
     e54:	04 c0       	rjmp	.+8      	; 0xe5e <run_state+0x19a>
     e56:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <sao_mode>
     e5a:	83 30       	cpi	r24, 0x03	; 3
     e5c:	11 f4       	brne	.+4      	; 0xe62 <run_state+0x19e>
	{
		//This flag cannot be set if we are not in a game mode
		game_temp_flag = 0;
     e5e:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <game_temp_flag>
	}
	
	button_action = 0;
     e62:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <button_action>
     e66:	08 95       	ret

00000e68 <main>:
}

int main(void)
{
	cli();
     e68:	f8 94       	cli
	clk_init();
     e6a:	0e 94 3f 01 	call	0x27e	; 0x27e <clk_init>
	io_init();
     e6e:	0e 94 4c 01 	call	0x298	; 0x298 <io_init>
	

	//No Interrupt setup needed
	timers_init();
     e72:	0e 94 67 01 	call	0x2ce	; 0x2ce <timers_init>
	
	//Debug LED pin
	PORTA.DIRSET = PIN2_bm;	
     e76:	84 e0       	ldi	r24, 0x04	; 4
     e78:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <noteClocks+0x7f6f00>
	sei();
     e7c:	78 94       	sei

	load_game_length();
     e7e:	0e 94 87 01 	call	0x30e	; 0x30e <load_game_length>

	//If the pin is held for five seconds, we are in reset mode
	while(game_timer < RESET_PER)
     e82:	09 c0       	rjmp	.+18     	; 0xe96 <main+0x2e>
	{
		if (PORTB.IN & PIN5_bm)	
     e84:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <noteClocks+0x7f6f27>
     e88:	85 ff       	sbrs	r24, 5
     e8a:	05 c0       	rjmp	.+10     	; 0xe96 <main+0x2e>
		{
			game_timer = 0;
     e8c:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <__data_end>
     e90:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <__data_end+0x1>
			break;
     e94:	07 c0       	rjmp	.+14     	; 0xea4 <main+0x3c>
	sei();

	load_game_length();

	//If the pin is held for five seconds, we are in reset mode
	while(game_timer < RESET_PER)
     e96:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <__data_end>
     e9a:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <__data_end+0x1>
     e9e:	8c 32       	cpi	r24, 0x2C	; 44
     ea0:	91 40       	sbci	r25, 0x01	; 1
     ea2:	80 f3       	brcs	.-32     	; 0xe84 <main+0x1c>
		}
	}
	
	//The game timer will indicate that we were held in reset
	//So reset the game length
	if (game_timer >= RESET_PER) 
     ea4:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <__data_end>
     ea8:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <__data_end+0x1>
     eac:	8c 32       	cpi	r24, 0x2C	; 44
     eae:	91 40       	sbci	r25, 0x01	; 1
     eb0:	28 f0       	brcs	.+10     	; 0xebc <main+0x54>
	{
		game_length = GAME_LENGTH_MIN - 1;
     eb2:	84 e0       	ldi	r24, 0x04	; 4
     eb4:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <game_length>
		update_game_length();
     eb8:	0e 94 97 01 	call	0x32e	; 0x32e <update_game_length>
	}


	if (!(PORTB.IN & PIN4_bm)) //Force it for now
     ebc:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <noteClocks+0x7f6f27>
     ec0:	84 fd       	sbrc	r24, 4
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <main+0x68>
	{
		insert_button_pressed = 1;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <insert_button_pressed>
		load_standby();	
     eca:	0e 94 c2 02 	call	0x584	; 0x584 <load_standby>
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <main+0x70>
	}
	else
	{
		insert_button_pressed = 0;
     ed0:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <insert_button_pressed>
		load_game();
     ed4:	0e 94 bd 03 	call	0x77a	; 0x77a <load_game>
	}
	
	
    while (1) 
    {		
		check_buttons();
     ed8:	0e 94 3a 06 	call	0xc74	; 0xc74 <check_buttons>
		run_state();
     edc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <run_state>
     ee0:	fb cf       	rjmp	.-10     	; 0xed8 <main+0x70>

00000ee2 <__vector_13>:



//BPM Timer
ISR(TCB0_INT_vect)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31

	if (ch0_beats > 0)
     f04:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <ch0_beats>
     f08:	88 23       	and	r24, r24
     f0a:	f1 f1       	breq	.+124    	; 0xf88 <__vector_13+0xa6>
	{
 		if (!(TCA0.SINGLE.CTRLB & TCA_SINGLE_CMP0EN_bm) && ch0_note)
     f0c:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <noteClocks+0x7f7500>
     f10:	84 fd       	sbrc	r24, 4
     f12:	1e c0       	rjmp	.+60     	; 0xf50 <__vector_13+0x6e>
     f14:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <ch0_note>
     f18:	88 23       	and	r24, r24
     f1a:	d1 f0       	breq	.+52     	; 0xf50 <__vector_13+0x6e>
 		{
// 			
// 			//PER for TCA0 needs to be multiplied by 2
// 			//Also need to reset the count to have the next not play correctly
 			TCA0.SINGLE.CNT = 0;
     f1c:	a0 e0       	ldi	r26, 0x00	; 0
     f1e:	ba e0       	ldi	r27, 0x0A	; 10
     f20:	90 96       	adiw	r26, 0x20	; 32
     f22:	1d 92       	st	X+, r1
     f24:	1c 92       	st	X, r1
     f26:	91 97       	sbiw	r26, 0x21	; 33
			TCA0.SINGLE.CMP0 = noteClocks[ch0_note - 1];
     f28:	e0 91 3f 38 	lds	r30, 0x383F	; 0x80383f <ch0_note>
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	31 97       	sbiw	r30, 0x01	; 1
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	ef 5f       	subi	r30, 0xFF	; 255
     f36:	fa 46       	sbci	r31, 0x6A	; 106
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	98 96       	adiw	r26, 0x28	; 40
     f3e:	8d 93       	st	X+, r24
     f40:	9c 93       	st	X, r25
     f42:	99 97       	sbiw	r26, 0x29	; 41
 			TCA0.SINGLE.CTRLB |= TCA_SINGLE_CMP0EN_bm;
     f44:	11 96       	adiw	r26, 0x01	; 1
     f46:	8c 91       	ld	r24, X
     f48:	11 97       	sbiw	r26, 0x01	; 1
     f4a:	80 61       	ori	r24, 0x10	; 16
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	8c 93       	st	X, r24
 		}
		ch0_beats--;
     f50:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <ch0_beats>
     f54:	81 50       	subi	r24, 0x01	; 1
     f56:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <ch0_beats>
		if (ch0_beats == 0)
     f5a:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <ch0_beats>
     f5e:	81 11       	cpse	r24, r1
     f60:	18 c0       	rjmp	.+48     	; 0xf92 <__vector_13+0xb0>
		{
		
			TCA0.SINGLE.CTRLB &= ~TCA_SINGLE_CMP0EN_bm;
     f62:	e0 e0       	ldi	r30, 0x00	; 0
     f64:	fa e0       	ldi	r31, 0x0A	; 10
     f66:	81 81       	ldd	r24, Z+1	; 0x01
     f68:	8f 7e       	andi	r24, 0xEF	; 239
     f6a:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f6c:	8f e4       	ldi	r24, 0x4F	; 79
     f6e:	93 ec       	ldi	r25, 0xC3	; 195
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <__vector_13+0x8e>
     f74:	00 c0       	rjmp	.+0      	; 0xf76 <__vector_13+0x94>
     f76:	00 00       	nop
			//Adding a small delay punctuates identical notes in sequence
			_delay_ms(10);
			if (sao_mode == SongMode)
     f78:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <sao_mode>
     f7c:	83 30       	cpi	r24, 0x03	; 3
     f7e:	49 f4       	brne	.+18     	; 0xf92 <__vector_13+0xb0>
			{
				
				//Loading the next note here holds the timing better between channels				
				
				load_next_note(0);			
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 cb 01 	call	0x396	; 0x396 <load_next_note>
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <__vector_13+0xb0>
		
	}
	else
	{
		//"Turn off" the timer by disabling the output
		TCA0.SINGLE.CTRLB &= ~TCA_SINGLE_CMP0EN_bm;			
     f88:	e0 e0       	ldi	r30, 0x00	; 0
     f8a:	fa e0       	ldi	r31, 0x0A	; 10
     f8c:	81 81       	ldd	r24, Z+1	; 0x01
     f8e:	8f 7e       	andi	r24, 0xEF	; 239
     f90:	81 83       	std	Z+1, r24	; 0x01
	}
	
	if (ch1_beats > 0)
     f92:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <ch1_beats>
     f96:	88 23       	and	r24, r24
     f98:	09 f4       	brne	.+2      	; 0xf9c <__vector_13+0xba>
     f9a:	47 c0       	rjmp	.+142    	; 0x102a <__vector_13+0x148>
	{
 		if (!(TCD0.CTRLA & TCD_ENABLE_bm) && ch1_note)
     f9c:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <noteClocks+0x7f757f>
     fa0:	80 fd       	sbrc	r24, 0
     fa2:	27 c0       	rjmp	.+78     	; 0xff2 <__vector_13+0x110>
     fa4:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <ch1_note>
     fa8:	88 23       	and	r24, r24
     faa:	19 f1       	breq	.+70     	; 0xff2 <__vector_13+0x110>
 		{

// 			//PER for TCD0 starts at half way mark and ends at double the frequency			
 			TCD0.CMPBCLR = noteClocks[ch1_note - 1];
     fac:	e0 91 3d 38 	lds	r30, 0x383D	; 0x80383d <ch1_note>
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	31 97       	sbiw	r30, 0x01	; 1
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	ef 5f       	subi	r30, 0xFF	; 255
     fba:	fa 46       	sbci	r31, 0x6A	; 106
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	a0 e8       	ldi	r26, 0x80	; 128
     fc2:	ba e0       	ldi	r27, 0x0A	; 10
     fc4:	9e 96       	adiw	r26, 0x2e	; 46
     fc6:	8d 93       	st	X+, r24
     fc8:	9c 93       	st	X, r25
     fca:	9f 97       	sbiw	r26, 0x2f	; 47
 			TCD0.CMPBSET = noteClocks[ch1_note - 1] >> 1;			
     fcc:	e0 91 3d 38 	lds	r30, 0x383D	; 0x80383d <ch1_note>
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	31 97       	sbiw	r30, 0x01	; 1
     fd4:	ee 0f       	add	r30, r30
     fd6:	ff 1f       	adc	r31, r31
     fd8:	ef 5f       	subi	r30, 0xFF	; 255
     fda:	fa 46       	sbci	r31, 0x6A	; 106
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	96 95       	lsr	r25
     fe2:	87 95       	ror	r24
     fe4:	9c 96       	adiw	r26, 0x2c	; 44
     fe6:	8d 93       	st	X+, r24
     fe8:	9c 93       	st	X, r25
     fea:	9d 97       	sbiw	r26, 0x2d	; 45
 			TCD0.CTRLA |= TCD_ENABLE_bm;
     fec:	8c 91       	ld	r24, X
     fee:	81 60       	ori	r24, 0x01	; 1
     ff0:	8c 93       	st	X, r24
 		}
		ch1_beats--;
     ff2:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <ch1_beats>
     ff6:	81 50       	subi	r24, 0x01	; 1
     ff8:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <ch1_beats>
		if (ch1_beats == 0)
     ffc:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <ch1_beats>
    1000:	81 11       	cpse	r24, r1
    1002:	18 c0       	rjmp	.+48     	; 0x1034 <__vector_13+0x152>
		{
			TCD0.CTRLA &= ~TCD_ENABLE_bm;
    1004:	e0 e8       	ldi	r30, 0x80	; 128
    1006:	fa e0       	ldi	r31, 0x0A	; 10
    1008:	80 81       	ld	r24, Z
    100a:	8e 7f       	andi	r24, 0xFE	; 254
    100c:	80 83       	st	Z, r24
    100e:	8f e4       	ldi	r24, 0x4F	; 79
    1010:	93 ec       	ldi	r25, 0xC3	; 195
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <__vector_13+0x130>
    1016:	00 c0       	rjmp	.+0      	; 0x1018 <__vector_13+0x136>
    1018:	00 00       	nop
			//Adding a small delay punctuates identical notes in sequence
			_delay_ms(10);			
			if (sao_mode == SongMode)
    101a:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <sao_mode>
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	49 f4       	brne	.+18     	; 0x1034 <__vector_13+0x152>
			{				
				//Loading the next note here holds the timing better between channels
				load_next_note(1);		
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0e 94 cb 01 	call	0x396	; 0x396 <load_next_note>
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <__vector_13+0x152>
			}
		}
	}
	else
	{		
 		TCD0.CTRLA &= ~TCD_ENABLE_bm;
    102a:	e0 e8       	ldi	r30, 0x80	; 128
    102c:	fa e0       	ldi	r31, 0x0A	; 10
    102e:	80 81       	ld	r24, Z
    1030:	8e 7f       	andi	r24, 0xFE	; 254
    1032:	80 83       	st	Z, r24
	}	
	
	TCB0.INTFLAGS = TCB_CAPT_bm;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <noteClocks+0x7f7545>
}
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_14>:

//Sys Timer
ISR(TCB1_INT_vect)
{
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
	disp_count++;
    106a:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <disp_count>
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <disp_count>
	game_timer++;
    1074:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <__data_end>
    1078:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <__data_end+0x1>
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <__data_end>
    1082:	90 93 2d 38 	sts	0x382D, r25	; 0x80382d <__data_end+0x1>
	
	if (button_down)
    1086:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <button_down>
    108a:	88 23       	and	r24, r24
    108c:	31 f0       	breq	.+12     	; 0x109a <__vector_14+0x3e>
	{
		debounce_count++;
    108e:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <debounce_count>
    1092:	8f 5f       	subi	r24, 0xFF	; 255
    1094:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <debounce_count>
    1098:	02 c0       	rjmp	.+4      	; 0x109e <__vector_14+0x42>
	}
	else
	{
		debounce_count = 0;
    109a:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <debounce_count>
	}
	
	//Setting the button here should cause less bounce issues without actually debouncing
	insert_button_pressed = !(PORTB.IN & PIN4_bm);
    109e:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <noteClocks+0x7f6f27>
    10a2:	82 95       	swap	r24
    10a4:	8f 70       	andi	r24, 0x0F	; 15
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	89 27       	eor	r24, r25
    10aa:	81 70       	andi	r24, 0x01	; 1
    10ac:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <insert_button_pressed>
 	
	TCB1.INTFLAGS = TCB_CAPT_bm;
    10b0:	90 93 56 0a 	sts	0x0A56, r25	; 0x800a56 <noteClocks+0x7f7555>
}
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	0f 90       	pop	r0
    10be:	1f 90       	pop	r1
    10c0:	18 95       	reti

000010c2 <__tablejump2__>:
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	05 90       	lpm	r0, Z+
    10c8:	f4 91       	lpm	r31, Z
    10ca:	e0 2d       	mov	r30, r0
    10cc:	09 94       	ijmp

000010ce <malloc>:
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	91 05       	cpc	r25, r1
    10da:	10 f4       	brcc	.+4      	; 0x10e0 <malloc+0x12>
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	e0 91 7c 38 	lds	r30, 0x387C	; 0x80387c <__flp>
    10e4:	f0 91 7d 38 	lds	r31, 0x387D	; 0x80387d <__flp+0x1>
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	a0 e0       	ldi	r26, 0x00	; 0
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	30 97       	sbiw	r30, 0x00	; 0
    10f2:	19 f1       	breq	.+70     	; 0x113a <malloc+0x6c>
    10f4:	40 81       	ld	r20, Z
    10f6:	51 81       	ldd	r21, Z+1	; 0x01
    10f8:	02 81       	ldd	r16, Z+2	; 0x02
    10fa:	13 81       	ldd	r17, Z+3	; 0x03
    10fc:	48 17       	cp	r20, r24
    10fe:	59 07       	cpc	r21, r25
    1100:	c8 f0       	brcs	.+50     	; 0x1134 <malloc+0x66>
    1102:	84 17       	cp	r24, r20
    1104:	95 07       	cpc	r25, r21
    1106:	69 f4       	brne	.+26     	; 0x1122 <malloc+0x54>
    1108:	10 97       	sbiw	r26, 0x00	; 0
    110a:	31 f0       	breq	.+12     	; 0x1118 <malloc+0x4a>
    110c:	12 96       	adiw	r26, 0x02	; 2
    110e:	0c 93       	st	X, r16
    1110:	12 97       	sbiw	r26, 0x02	; 2
    1112:	13 96       	adiw	r26, 0x03	; 3
    1114:	1c 93       	st	X, r17
    1116:	27 c0       	rjmp	.+78     	; 0x1166 <malloc+0x98>
    1118:	00 93 7c 38 	sts	0x387C, r16	; 0x80387c <__flp>
    111c:	10 93 7d 38 	sts	0x387D, r17	; 0x80387d <__flp+0x1>
    1120:	22 c0       	rjmp	.+68     	; 0x1166 <malloc+0x98>
    1122:	21 15       	cp	r18, r1
    1124:	31 05       	cpc	r19, r1
    1126:	19 f0       	breq	.+6      	; 0x112e <malloc+0x60>
    1128:	42 17       	cp	r20, r18
    112a:	53 07       	cpc	r21, r19
    112c:	18 f4       	brcc	.+6      	; 0x1134 <malloc+0x66>
    112e:	9a 01       	movw	r18, r20
    1130:	bd 01       	movw	r22, r26
    1132:	ef 01       	movw	r28, r30
    1134:	df 01       	movw	r26, r30
    1136:	f8 01       	movw	r30, r16
    1138:	db cf       	rjmp	.-74     	; 0x10f0 <malloc+0x22>
    113a:	21 15       	cp	r18, r1
    113c:	31 05       	cpc	r19, r1
    113e:	f9 f0       	breq	.+62     	; 0x117e <malloc+0xb0>
    1140:	28 1b       	sub	r18, r24
    1142:	39 0b       	sbc	r19, r25
    1144:	24 30       	cpi	r18, 0x04	; 4
    1146:	31 05       	cpc	r19, r1
    1148:	80 f4       	brcc	.+32     	; 0x116a <malloc+0x9c>
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	61 15       	cp	r22, r1
    1150:	71 05       	cpc	r23, r1
    1152:	21 f0       	breq	.+8      	; 0x115c <malloc+0x8e>
    1154:	fb 01       	movw	r30, r22
    1156:	82 83       	std	Z+2, r24	; 0x02
    1158:	93 83       	std	Z+3, r25	; 0x03
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <malloc+0x96>
    115c:	80 93 7c 38 	sts	0x387C, r24	; 0x80387c <__flp>
    1160:	90 93 7d 38 	sts	0x387D, r25	; 0x80387d <__flp+0x1>
    1164:	fe 01       	movw	r30, r28
    1166:	32 96       	adiw	r30, 0x02	; 2
    1168:	44 c0       	rjmp	.+136    	; 0x11f2 <malloc+0x124>
    116a:	fe 01       	movw	r30, r28
    116c:	e2 0f       	add	r30, r18
    116e:	f3 1f       	adc	r31, r19
    1170:	81 93       	st	Z+, r24
    1172:	91 93       	st	Z+, r25
    1174:	22 50       	subi	r18, 0x02	; 2
    1176:	31 09       	sbc	r19, r1
    1178:	28 83       	st	Y, r18
    117a:	39 83       	std	Y+1, r19	; 0x01
    117c:	3a c0       	rjmp	.+116    	; 0x11f2 <malloc+0x124>
    117e:	20 91 7a 38 	lds	r18, 0x387A	; 0x80387a <__brkval>
    1182:	30 91 7b 38 	lds	r19, 0x387B	; 0x80387b <__brkval+0x1>
    1186:	23 2b       	or	r18, r19
    1188:	41 f4       	brne	.+16     	; 0x119a <malloc+0xcc>
    118a:	20 91 02 38 	lds	r18, 0x3802	; 0x803802 <__malloc_heap_start>
    118e:	30 91 03 38 	lds	r19, 0x3803	; 0x803803 <__malloc_heap_start+0x1>
    1192:	20 93 7a 38 	sts	0x387A, r18	; 0x80387a <__brkval>
    1196:	30 93 7b 38 	sts	0x387B, r19	; 0x80387b <__brkval+0x1>
    119a:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
    119e:	30 91 01 38 	lds	r19, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
    11a2:	21 15       	cp	r18, r1
    11a4:	31 05       	cpc	r19, r1
    11a6:	41 f4       	brne	.+16     	; 0x11b8 <malloc+0xea>
    11a8:	2d b7       	in	r18, 0x3d	; 61
    11aa:	3e b7       	in	r19, 0x3e	; 62
    11ac:	40 91 04 38 	lds	r20, 0x3804	; 0x803804 <__malloc_margin>
    11b0:	50 91 05 38 	lds	r21, 0x3805	; 0x803805 <__malloc_margin+0x1>
    11b4:	24 1b       	sub	r18, r20
    11b6:	35 0b       	sbc	r19, r21
    11b8:	e0 91 7a 38 	lds	r30, 0x387A	; 0x80387a <__brkval>
    11bc:	f0 91 7b 38 	lds	r31, 0x387B	; 0x80387b <__brkval+0x1>
    11c0:	e2 17       	cp	r30, r18
    11c2:	f3 07       	cpc	r31, r19
    11c4:	a0 f4       	brcc	.+40     	; 0x11ee <malloc+0x120>
    11c6:	2e 1b       	sub	r18, r30
    11c8:	3f 0b       	sbc	r19, r31
    11ca:	28 17       	cp	r18, r24
    11cc:	39 07       	cpc	r19, r25
    11ce:	78 f0       	brcs	.+30     	; 0x11ee <malloc+0x120>
    11d0:	ac 01       	movw	r20, r24
    11d2:	4e 5f       	subi	r20, 0xFE	; 254
    11d4:	5f 4f       	sbci	r21, 0xFF	; 255
    11d6:	24 17       	cp	r18, r20
    11d8:	35 07       	cpc	r19, r21
    11da:	48 f0       	brcs	.+18     	; 0x11ee <malloc+0x120>
    11dc:	4e 0f       	add	r20, r30
    11de:	5f 1f       	adc	r21, r31
    11e0:	40 93 7a 38 	sts	0x387A, r20	; 0x80387a <__brkval>
    11e4:	50 93 7b 38 	sts	0x387B, r21	; 0x80387b <__brkval+0x1>
    11e8:	81 93       	st	Z+, r24
    11ea:	91 93       	st	Z+, r25
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <malloc+0x124>
    11ee:	e0 e0       	ldi	r30, 0x00	; 0
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	cf 01       	movw	r24, r30
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <free>:
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	09 f4       	brne	.+2      	; 0x1208 <free+0xa>
    1206:	81 c0       	rjmp	.+258    	; 0x130a <free+0x10c>
    1208:	fc 01       	movw	r30, r24
    120a:	32 97       	sbiw	r30, 0x02	; 2
    120c:	12 82       	std	Z+2, r1	; 0x02
    120e:	13 82       	std	Z+3, r1	; 0x03
    1210:	a0 91 7c 38 	lds	r26, 0x387C	; 0x80387c <__flp>
    1214:	b0 91 7d 38 	lds	r27, 0x387D	; 0x80387d <__flp+0x1>
    1218:	10 97       	sbiw	r26, 0x00	; 0
    121a:	81 f4       	brne	.+32     	; 0x123c <free+0x3e>
    121c:	20 81       	ld	r18, Z
    121e:	31 81       	ldd	r19, Z+1	; 0x01
    1220:	82 0f       	add	r24, r18
    1222:	93 1f       	adc	r25, r19
    1224:	20 91 7a 38 	lds	r18, 0x387A	; 0x80387a <__brkval>
    1228:	30 91 7b 38 	lds	r19, 0x387B	; 0x80387b <__brkval+0x1>
    122c:	28 17       	cp	r18, r24
    122e:	39 07       	cpc	r19, r25
    1230:	51 f5       	brne	.+84     	; 0x1286 <free+0x88>
    1232:	e0 93 7a 38 	sts	0x387A, r30	; 0x80387a <__brkval>
    1236:	f0 93 7b 38 	sts	0x387B, r31	; 0x80387b <__brkval+0x1>
    123a:	67 c0       	rjmp	.+206    	; 0x130a <free+0x10c>
    123c:	ed 01       	movw	r28, r26
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	ce 17       	cp	r28, r30
    1244:	df 07       	cpc	r29, r31
    1246:	40 f4       	brcc	.+16     	; 0x1258 <free+0x5a>
    1248:	4a 81       	ldd	r20, Y+2	; 0x02
    124a:	5b 81       	ldd	r21, Y+3	; 0x03
    124c:	9e 01       	movw	r18, r28
    124e:	41 15       	cp	r20, r1
    1250:	51 05       	cpc	r21, r1
    1252:	f1 f0       	breq	.+60     	; 0x1290 <free+0x92>
    1254:	ea 01       	movw	r28, r20
    1256:	f5 cf       	rjmp	.-22     	; 0x1242 <free+0x44>
    1258:	c2 83       	std	Z+2, r28	; 0x02
    125a:	d3 83       	std	Z+3, r29	; 0x03
    125c:	40 81       	ld	r20, Z
    125e:	51 81       	ldd	r21, Z+1	; 0x01
    1260:	84 0f       	add	r24, r20
    1262:	95 1f       	adc	r25, r21
    1264:	c8 17       	cp	r28, r24
    1266:	d9 07       	cpc	r29, r25
    1268:	59 f4       	brne	.+22     	; 0x1280 <free+0x82>
    126a:	88 81       	ld	r24, Y
    126c:	99 81       	ldd	r25, Y+1	; 0x01
    126e:	84 0f       	add	r24, r20
    1270:	95 1f       	adc	r25, r21
    1272:	02 96       	adiw	r24, 0x02	; 2
    1274:	80 83       	st	Z, r24
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	9b 81       	ldd	r25, Y+3	; 0x03
    127c:	82 83       	std	Z+2, r24	; 0x02
    127e:	93 83       	std	Z+3, r25	; 0x03
    1280:	21 15       	cp	r18, r1
    1282:	31 05       	cpc	r19, r1
    1284:	29 f4       	brne	.+10     	; 0x1290 <free+0x92>
    1286:	e0 93 7c 38 	sts	0x387C, r30	; 0x80387c <__flp>
    128a:	f0 93 7d 38 	sts	0x387D, r31	; 0x80387d <__flp+0x1>
    128e:	3d c0       	rjmp	.+122    	; 0x130a <free+0x10c>
    1290:	e9 01       	movw	r28, r18
    1292:	ea 83       	std	Y+2, r30	; 0x02
    1294:	fb 83       	std	Y+3, r31	; 0x03
    1296:	49 91       	ld	r20, Y+
    1298:	59 91       	ld	r21, Y+
    129a:	c4 0f       	add	r28, r20
    129c:	d5 1f       	adc	r29, r21
    129e:	ec 17       	cp	r30, r28
    12a0:	fd 07       	cpc	r31, r29
    12a2:	61 f4       	brne	.+24     	; 0x12bc <free+0xbe>
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	84 0f       	add	r24, r20
    12aa:	95 1f       	adc	r25, r21
    12ac:	02 96       	adiw	r24, 0x02	; 2
    12ae:	e9 01       	movw	r28, r18
    12b0:	88 83       	st	Y, r24
    12b2:	99 83       	std	Y+1, r25	; 0x01
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	93 81       	ldd	r25, Z+3	; 0x03
    12b8:	8a 83       	std	Y+2, r24	; 0x02
    12ba:	9b 83       	std	Y+3, r25	; 0x03
    12bc:	e0 e0       	ldi	r30, 0x00	; 0
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	12 96       	adiw	r26, 0x02	; 2
    12c2:	8d 91       	ld	r24, X+
    12c4:	9c 91       	ld	r25, X
    12c6:	13 97       	sbiw	r26, 0x03	; 3
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	19 f0       	breq	.+6      	; 0x12d2 <free+0xd4>
    12cc:	fd 01       	movw	r30, r26
    12ce:	dc 01       	movw	r26, r24
    12d0:	f7 cf       	rjmp	.-18     	; 0x12c0 <free+0xc2>
    12d2:	8d 91       	ld	r24, X+
    12d4:	9c 91       	ld	r25, X
    12d6:	11 97       	sbiw	r26, 0x01	; 1
    12d8:	9d 01       	movw	r18, r26
    12da:	2e 5f       	subi	r18, 0xFE	; 254
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	82 0f       	add	r24, r18
    12e0:	93 1f       	adc	r25, r19
    12e2:	20 91 7a 38 	lds	r18, 0x387A	; 0x80387a <__brkval>
    12e6:	30 91 7b 38 	lds	r19, 0x387B	; 0x80387b <__brkval+0x1>
    12ea:	28 17       	cp	r18, r24
    12ec:	39 07       	cpc	r19, r25
    12ee:	69 f4       	brne	.+26     	; 0x130a <free+0x10c>
    12f0:	30 97       	sbiw	r30, 0x00	; 0
    12f2:	29 f4       	brne	.+10     	; 0x12fe <free+0x100>
    12f4:	10 92 7c 38 	sts	0x387C, r1	; 0x80387c <__flp>
    12f8:	10 92 7d 38 	sts	0x387D, r1	; 0x80387d <__flp+0x1>
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <free+0x104>
    12fe:	12 82       	std	Z+2, r1	; 0x02
    1300:	13 82       	std	Z+3, r1	; 0x03
    1302:	a0 93 7a 38 	sts	0x387A, r26	; 0x80387a <__brkval>
    1306:	b0 93 7b 38 	sts	0x387B, r27	; 0x80387b <__brkval+0x1>
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <do_rand>:
    1310:	8f 92       	push	r8
    1312:	9f 92       	push	r9
    1314:	af 92       	push	r10
    1316:	bf 92       	push	r11
    1318:	cf 92       	push	r12
    131a:	df 92       	push	r13
    131c:	ef 92       	push	r14
    131e:	ff 92       	push	r15
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	ec 01       	movw	r28, r24
    1326:	68 81       	ld	r22, Y
    1328:	79 81       	ldd	r23, Y+1	; 0x01
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	9b 81       	ldd	r25, Y+3	; 0x03
    132e:	61 15       	cp	r22, r1
    1330:	71 05       	cpc	r23, r1
    1332:	81 05       	cpc	r24, r1
    1334:	91 05       	cpc	r25, r1
    1336:	21 f4       	brne	.+8      	; 0x1340 <do_rand+0x30>
    1338:	64 e2       	ldi	r22, 0x24	; 36
    133a:	79 ed       	ldi	r23, 0xD9	; 217
    133c:	8b e5       	ldi	r24, 0x5B	; 91
    133e:	97 e0       	ldi	r25, 0x07	; 7
    1340:	2d e1       	ldi	r18, 0x1D	; 29
    1342:	33 ef       	ldi	r19, 0xF3	; 243
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	0e 94 00 0a 	call	0x1400	; 0x1400 <__divmodsi4>
    134c:	49 01       	movw	r8, r18
    134e:	5a 01       	movw	r10, r20
    1350:	9b 01       	movw	r18, r22
    1352:	ac 01       	movw	r20, r24
    1354:	a7 ea       	ldi	r26, 0xA7	; 167
    1356:	b1 e4       	ldi	r27, 0x41	; 65
    1358:	0e 94 1f 0a 	call	0x143e	; 0x143e <__muluhisi3>
    135c:	6b 01       	movw	r12, r22
    135e:	7c 01       	movw	r14, r24
    1360:	ac ee       	ldi	r26, 0xEC	; 236
    1362:	b4 ef       	ldi	r27, 0xF4	; 244
    1364:	a5 01       	movw	r20, r10
    1366:	94 01       	movw	r18, r8
    1368:	0e 94 2d 0a 	call	0x145a	; 0x145a <__mulohisi3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	8c 0d       	add	r24, r12
    1372:	9d 1d       	adc	r25, r13
    1374:	ae 1d       	adc	r26, r14
    1376:	bf 1d       	adc	r27, r15
    1378:	b7 ff       	sbrs	r27, 7
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <do_rand+0x72>
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	a1 09       	sbc	r26, r1
    1380:	b0 48       	sbci	r27, 0x80	; 128
    1382:	88 83       	st	Y, r24
    1384:	99 83       	std	Y+1, r25	; 0x01
    1386:	aa 83       	std	Y+2, r26	; 0x02
    1388:	bb 83       	std	Y+3, r27	; 0x03
    138a:	9f 77       	andi	r25, 0x7F	; 127
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	bf 90       	pop	r11
    139a:	af 90       	pop	r10
    139c:	9f 90       	pop	r9
    139e:	8f 90       	pop	r8
    13a0:	08 95       	ret

000013a2 <rand_r>:
    13a2:	0e 94 88 09 	call	0x1310	; 0x1310 <do_rand>
    13a6:	08 95       	ret

000013a8 <rand>:
    13a8:	86 e0       	ldi	r24, 0x06	; 6
    13aa:	98 e3       	ldi	r25, 0x38	; 56
    13ac:	0e 94 88 09 	call	0x1310	; 0x1310 <do_rand>
    13b0:	08 95       	ret

000013b2 <srand>:
    13b2:	a0 e0       	ldi	r26, 0x00	; 0
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <next>
    13ba:	90 93 07 38 	sts	0x3807, r25	; 0x803807 <next+0x1>
    13be:	a0 93 08 38 	sts	0x3808, r26	; 0x803808 <next+0x2>
    13c2:	b0 93 09 38 	sts	0x3809, r27	; 0x803809 <next+0x3>
    13c6:	08 95       	ret

000013c8 <eeprom_read_byte>:
    13c8:	03 d0       	rcall	.+6      	; 0x13d0 <eeprom_mapen>
    13ca:	80 81       	ld	r24, Z
    13cc:	99 27       	eor	r25, r25
    13ce:	08 95       	ret

000013d0 <eeprom_mapen>:
    13d0:	fc 01       	movw	r30, r24
    13d2:	e0 50       	subi	r30, 0x00	; 0
    13d4:	fc 4e       	sbci	r31, 0xEC	; 236
    13d6:	08 95       	ret

000013d8 <eeprom_write_byte>:
    13d8:	26 2f       	mov	r18, r22

000013da <eeprom_write_r18>:
    13da:	af 93       	push	r26
    13dc:	bf 93       	push	r27
    13de:	e0 e0       	ldi	r30, 0x00	; 0
    13e0:	f0 e1       	ldi	r31, 0x10	; 16
    13e2:	32 81       	ldd	r19, Z+2	; 0x02
    13e4:	31 fd       	sbrc	r19, 1
    13e6:	fd cf       	rjmp	.-6      	; 0x13e2 <eeprom_write_r18+0x8>
    13e8:	dc 01       	movw	r26, r24
    13ea:	a0 50       	subi	r26, 0x00	; 0
    13ec:	bc 4e       	sbci	r27, 0xEC	; 236
    13ee:	2c 93       	st	X, r18
    13f0:	2d e9       	ldi	r18, 0x9D	; 157
    13f2:	24 bf       	out	0x34, r18	; 52
    13f4:	23 e0       	ldi	r18, 0x03	; 3
    13f6:	20 83       	st	Z, r18
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	bf 91       	pop	r27
    13fc:	af 91       	pop	r26
    13fe:	08 95       	ret

00001400 <__divmodsi4>:
    1400:	05 2e       	mov	r0, r21
    1402:	97 fb       	bst	r25, 7
    1404:	1e f4       	brtc	.+6      	; 0x140c <__divmodsi4+0xc>
    1406:	00 94       	com	r0
    1408:	0e 94 17 0a 	call	0x142e	; 0x142e <__negsi2>
    140c:	57 fd       	sbrc	r21, 7
    140e:	07 d0       	rcall	.+14     	; 0x141e <__divmodsi4_neg2>
    1410:	0e 94 32 0a 	call	0x1464	; 0x1464 <__udivmodsi4>
    1414:	07 fc       	sbrc	r0, 7
    1416:	03 d0       	rcall	.+6      	; 0x141e <__divmodsi4_neg2>
    1418:	4e f4       	brtc	.+18     	; 0x142c <__divmodsi4_exit>
    141a:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__negsi2>

0000141e <__divmodsi4_neg2>:
    141e:	50 95       	com	r21
    1420:	40 95       	com	r20
    1422:	30 95       	com	r19
    1424:	21 95       	neg	r18
    1426:	3f 4f       	sbci	r19, 0xFF	; 255
    1428:	4f 4f       	sbci	r20, 0xFF	; 255
    142a:	5f 4f       	sbci	r21, 0xFF	; 255

0000142c <__divmodsi4_exit>:
    142c:	08 95       	ret

0000142e <__negsi2>:
    142e:	90 95       	com	r25
    1430:	80 95       	com	r24
    1432:	70 95       	com	r23
    1434:	61 95       	neg	r22
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	08 95       	ret

0000143e <__muluhisi3>:
    143e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__umulhisi3>
    1442:	a5 9f       	mul	r26, r21
    1444:	90 0d       	add	r25, r0
    1446:	b4 9f       	mul	r27, r20
    1448:	90 0d       	add	r25, r0
    144a:	a4 9f       	mul	r26, r20
    144c:	80 0d       	add	r24, r0
    144e:	91 1d       	adc	r25, r1
    1450:	11 24       	eor	r1, r1
    1452:	08 95       	ret

00001454 <__mulshisi3>:
    1454:	b7 ff       	sbrs	r27, 7
    1456:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__muluhisi3>

0000145a <__mulohisi3>:
    145a:	0e 94 1f 0a 	call	0x143e	; 0x143e <__muluhisi3>
    145e:	82 1b       	sub	r24, r18
    1460:	93 0b       	sbc	r25, r19
    1462:	08 95       	ret

00001464 <__udivmodsi4>:
    1464:	a1 e2       	ldi	r26, 0x21	; 33
    1466:	1a 2e       	mov	r1, r26
    1468:	aa 1b       	sub	r26, r26
    146a:	bb 1b       	sub	r27, r27
    146c:	fd 01       	movw	r30, r26
    146e:	0d c0       	rjmp	.+26     	; 0x148a <__udivmodsi4_ep>

00001470 <__udivmodsi4_loop>:
    1470:	aa 1f       	adc	r26, r26
    1472:	bb 1f       	adc	r27, r27
    1474:	ee 1f       	adc	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	a2 17       	cp	r26, r18
    147a:	b3 07       	cpc	r27, r19
    147c:	e4 07       	cpc	r30, r20
    147e:	f5 07       	cpc	r31, r21
    1480:	20 f0       	brcs	.+8      	; 0x148a <__udivmodsi4_ep>
    1482:	a2 1b       	sub	r26, r18
    1484:	b3 0b       	sbc	r27, r19
    1486:	e4 0b       	sbc	r30, r20
    1488:	f5 0b       	sbc	r31, r21

0000148a <__udivmodsi4_ep>:
    148a:	66 1f       	adc	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	88 1f       	adc	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	1a 94       	dec	r1
    1494:	69 f7       	brne	.-38     	; 0x1470 <__udivmodsi4_loop>
    1496:	60 95       	com	r22
    1498:	70 95       	com	r23
    149a:	80 95       	com	r24
    149c:	90 95       	com	r25
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
    14a2:	bd 01       	movw	r22, r26
    14a4:	cf 01       	movw	r24, r30
    14a6:	08 95       	ret

000014a8 <__umulhisi3>:
    14a8:	a2 9f       	mul	r26, r18
    14aa:	b0 01       	movw	r22, r0
    14ac:	b3 9f       	mul	r27, r19
    14ae:	c0 01       	movw	r24, r0
    14b0:	a3 9f       	mul	r26, r19
    14b2:	70 0d       	add	r23, r0
    14b4:	81 1d       	adc	r24, r1
    14b6:	11 24       	eor	r1, r1
    14b8:	91 1d       	adc	r25, r1
    14ba:	b2 9f       	mul	r27, r18
    14bc:	70 0d       	add	r23, r0
    14be:	81 1d       	adc	r24, r1
    14c0:	11 24       	eor	r1, r1
    14c2:	91 1d       	adc	r25, r1
    14c4:	08 95       	ret

000014c6 <_exit>:
    14c6:	f8 94       	cli

000014c8 <__stop_program>:
    14c8:	ff cf       	rjmp	.-2      	; 0x14c8 <__stop_program>
